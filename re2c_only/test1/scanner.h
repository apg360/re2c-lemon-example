/* Generated by re2c 2.0.3 on Mon Dec 14 12:58:26 2020 */
// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html

static int lex(const char *str, unsigned int len) // const char *YYCURSOR) 
{
    const char *YYCURSOR = str;                  // current_char : the next input character to be read. 					A pointer-like l-value that stores the current input position
    const char *YYLIMIT = str + len;             // last_char    : the position after the last available input character. 	A pointer-like r-value that stores the end of input position
                                                                                                                            // Lexer compares YYCURSOR to YYLIMIT in order to determine if there is enough input characters left
    const char *YYMARKER;                        // marker_char  : the position of the most recent match
    int wordCount = 0;                           // count word, not letters
    
loop:
    
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t' ... '\n':
	case '\r': goto yy4;
	case ' ': goto yy6;
	case 'a' ... 'z': goto yy7;
	default:
		if (YYLIMIT <= YYCURSOR) goto yyeof1;
		goto yy2;
	}
yy2:
	++YYCURSOR;
	{ return -1; }
yy4:
	++YYCURSOR;
yy5:
	{ goto loop;}
yy6:
	yych = *++YYCURSOR;
	switch (yych) {
	case ' ': goto yy10;
	default: goto yy5;
	}
yy7:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a' ... 'z': goto yy7;
	default: goto yy9;
	}
yy9:
	{ ++wordCount; goto loop; }
yy10:
	yych = *++YYCURSOR;
	switch (yych) {
	case ' ': goto yy10;
	default: goto yy12;
	}
yy12:
	{ goto loop; }
yyeof1:
	{ return wordCount; }
}

}
