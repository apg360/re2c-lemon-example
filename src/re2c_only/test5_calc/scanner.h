/* Generated by re2c 2.0.3 on Wed Dec 23 22:27:15 2020 */
// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html

typedef enum { FAIL, OK } Result;

struct the_lexer
{
    const char *cursor;
    const char *marker;
    const char *limit;
};

struct the_token
{
    double num;
};





void show(const char *str) {
  printf("> %s\n",str);
}

static int SCANNER(const char *str, unsigned int lensize) // const char *YYCURSOR) 
{
    const char *YYCURSOR = str;                  // current_char : the next input character to be read.                     A pointer-like l-value that stores the current input position
    const char *YYLIMIT = str + lensize;             // last_char    : the position after the last available input character.   A pointer-like r-value that stores the end of input position
                                                                                                                            // Lexer compares YYCURSOR to YYLIMIT in order to determine if there is enough input characters left
    const char *YYMARKER;                        // marker_char  : the position of the most recent match
    int wordCount = 0;                           // count word, not letters
    
    printf("Scanning : '%s'\n",str);
    printf("> Number of characters %u\n",lensize);
    
    const char *lexeme;
loop:
    lexeme = YYCURSOR;
    
{
	char yych;
	unsigned int yyaccept = 0;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case ' ':	goto yy4;
	case '(':	goto yy7;
	case ')':	goto yy9;
	case '*':	goto yy11;
	case '+':	goto yy13;
	case '-':	goto yy15;
	case '.':	goto yy17;
	case '/':	goto yy18;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy20;
	case '^':	goto yy23;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy25;
	default:
		if (YYLIMIT <= YYCURSOR) goto yyeof2;
		goto yy2;
	}
yy2:
	++YYCURSOR;
yy3:
	{ show("Failed"); return FAIL; }
yy4:
	yych = *++YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case ' ':	goto yy4;
	default:	goto yy6;
	}
yy6:
	{ goto loop;}
yy7:
	++YYCURSOR;
	{ show("TOKEN_LPAREN");   goto loop; }
yy9:
	++YYCURSOR;
	{ show("TOKEN_RPAREN");   goto loop; }
yy11:
	++YYCURSOR;
	{ show("TOKEN_TIMES");    goto loop; }
yy13:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '.':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy20;
	default:	goto yy14;
	}
yy14:
	{ show("TOKEN_PLUS");     goto loop; }
yy15:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '.':	goto yy28;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy20;
	default:	goto yy16;
	}
yy16:
	{ show("TOKEN_MINUS");    goto loop; }
yy17:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy30;
	default:	goto yy3;
	}
yy18:
	++YYCURSOR;
	{ show("TOKEN_DIVIDE");   goto loop; }
yy20:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '.':	goto yy30;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy20;
	case 'E':
	case 'e':	goto yy32;
	default:	goto yy22;
	}
yy22:
	{
        //token->num = atof(str);
        //printf("> %f \n",atof(str));
        show(lexeme);
        goto loop;
    }
yy23:
	++YYCURSOR;
	{ show("TOKEN_EXPONENT"); goto loop; }
yy25:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy25;
	default:	goto yy27;
	}
yy27:
	{ ++wordCount; goto loop; }
yy28:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy30;
	default:	goto yy29;
	}
yy29:
	YYCURSOR = YYMARKER;
	switch (yyaccept) {
	case 0:
		goto yy14;
	case 1:
		goto yy16;
	default:
		goto yy22;
	}
yy30:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy30;
	case 'E':
	case 'e':	goto yy32;
	default:	goto yy22;
	}
yy32:
	yych = *++YYCURSOR;
	switch (yych) {
	case '+':
	case '-':	goto yy33;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy34;
	default:	goto yy29;
	}
yy33:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy34;
	default:	goto yy29;
	}
yy34:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy34;
	default:	goto yy22;
	}
yyeof2:
	{ printf("> Number of words = %d\n",wordCount);
                      return OK;}
}

}
