// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html
//
// With Lemon it is the lexer/tokenizer that calls/initiate the parser
// re2c calls lemon
//----------------------------------------------------------------------
// C grammar in Lemon
// https://www.lysator.liu.se/c/ANSI-C-grammar-y.html
// https://www.lysator.liu.se/c/ANSI-C-grammar-l.html
// https://github.com/antlr/grammars-v4/blob/master/c/C.g4
//
////////////////////////////////////////////////////////////////////////
//
// the contents of 'definitions.re2c' are copy-pasted verbatim in place of the directive
/*!include:re2c "definitions.re2c"*/

void set_token(const int tokentype, const char* tokentypename)
{
    SCANNER_STATE.token_id = tokentype;
    SCANNER_STATE.token_name = tokentypename;
    
    /*
    Example : 50+125
    STEP1: lexemes : 50+125, cursor : +125
    STEP2: lexemes : +125, cursor : 125
    STEP3: lexemes : 125, cursor :
    STEP4: lexemes : , cursor :
    */
    SCANNER_STATE.token_text_len  = (int)(SCANNER_STATE.cursor - SCANNER_STATE.lexemes);
    
    // lexemes = linetext + column_position THEN column_position = lexemes - linetext
    SCANNER_STATE.column_position = (int)(SCANNER_STATE.lexemes - SCANNER_STATE.linetext);
    
    // https://www.tutorialspoint.com/cprogramming/c_strings.htm
    // https://www.tutorialspoint.com/c_standard_library/c_function_strncpy.htm
    // start from 0 with 'src' chars and copy 'len' chars into destination
    // strncpy(dest, src, len);
    //
    strncpy(SCANNER_STATE.token_stringvalue, SCANNER_STATE.lexemes, SCANNER_STATE.token_text_len);
    printf("text len : %d\n",SCANNER_STATE.token_text_len);
    printf("text value : %s\n",SCANNER_STATE.token_stringvalue);
}

void reset_token()
{
    SCANNER_STATE.token_id = 0;
    // Erase/Empty token_stringvalue
    memset(SCANNER_STATE.token_stringvalue, '\0', sizeof(SCANNER_STATE.token_stringvalue));     // https://www.tutorialspoint.com/c_standard_library/c_function_memset.htm
    SCANNER_STATE.token_text_len  = strlen(SCANNER_STATE.token_stringvalue);
}

void SCANNER(const char *the_text)
{
    SCANNER_STATE.lexemes          = the_text;
    SCANNER_STATE.cursor           = the_text;
    SCANNER_STATE.end              = the_text + strlen(the_text);
    SCANNER_STATE.linetext         = the_text;
    SCANNER_STATE.line_number      = 1;
    SCANNER_STATE.column_position  = 1;
    
    printf(" ** START Scanning : '%s'\n",the_text);
    if (scanner_DebugMode == true) printf("Number of characters %lu\n", strlen(the_text));
    
    //re2c configuration
    /*!re2c
      re2c:define:YYCURSOR = SCANNER_STATE.cursor;
      re2c:define:YYMARKER = SCANNER_STATE.marker;
      re2c:define:YYCTYPE = char;                    // The type of the input characters (code units). For ASCII, EBCDIC and UTF-8 encodings it should be 1-byte unsigned integer.
      re2c:yyfill:enable = 0;
    */
    
    // Infinite loop
    for (;;) 
    {
continue_scanning:
    // Reset variables
    SCANNER_STATE.lexemes = SCANNER_STATE.cursor;
    reset_token();

    // If reached end of the text, last character (does not have "end");
    if ( SCANNER_STATE.cursor >= SCANNER_STATE.end )
    {
      set_token( MACRO_VALUE_AND_NAME(TK_END_OF_FILE) );
      goto parser_now;
    };
    
    /*!re2c

     // lexer rules are analyzed in the order that they appear and they can be ambiguous.
     // The typical example is the identifier: in many programming languages it can be any string of letters, 
     // but certain combinations, such as “class” or “function” are forbidden because they indicate a class or a function.
     // So the order of the rules solves the ambiguity by using the first match and that’s why the tokens identifying keywords such as class or function are defined first,
     // while the one for the identifier is put last.

     // https://www.lysator.liu.se/c/ANSI-C-grammar-l.html
      "/*"            { goto comment; }
      '('             { set_token( MACRO_VALUE_AND_NAME(TK_LPAREN)      ); goto parser_now;}
      ")"             { set_token( MACRO_VALUE_AND_NAME(TK_RPAREN)      ); goto parser_now;}
      "^"             { set_token( MACRO_VALUE_AND_NAME(TK_EXP)         ); goto parser_now;}
      "/"             { set_token( MACRO_VALUE_AND_NAME(TK_DIV)         ); goto parser_now;}
      "*"             { set_token( MACRO_VALUE_AND_NAME(TK_MUL)         ); goto parser_now;}
      "+"             { set_token( MACRO_VALUE_AND_NAME(TK_ADD)         ); goto parser_now;}
      "-"             { set_token( MACRO_VALUE_AND_NAME(TK_SUB)         ); goto parser_now;}
      "%"             { set_token( MACRO_VALUE_AND_NAME(TK_MOD)         ); goto parser_now;}
      ";"             { set_token( MACRO_VALUE_AND_NAME(TK_SEMCOL)      ); goto parser_now;}
      "="             { set_token( MACRO_VALUE_AND_NAME(TK_ASSIGN)      ); goto parser_now;}
      "{"             { set_token( MACRO_VALUE_AND_NAME(TK_LBRACKET)    ); goto parser_now;}
      "}"             { set_token( MACRO_VALUE_AND_NAME(TK_RBRACKET)    ); goto parser_now;}
      "if"            { set_token( MACRO_VALUE_AND_NAME(TK_IF)          ); goto parser_now;}
      "for"           { set_token( MACRO_VALUE_AND_NAME(TK_FOR)         ); goto parser_now;}
      "switch"        { set_token( MACRO_VALUE_AND_NAME(TK_SWITCH)      ); goto parser_now;}
      "break"         { set_token( MACRO_VALUE_AND_NAME(TK_BREAK)       ); goto parser_now;}
      "return"        { set_token( MACRO_VALUE_AND_NAME(TK_RETURN)      ); goto parser_now;}
      "fallthrough"   { set_token( MACRO_VALUE_AND_NAME(TK_FALLTHROUGH) ); goto parser_now;}
      
      "and"           { set_token( MACRO_VALUE_AND_NAME(TK_AND)         ); goto parser_now;}
      "or"            { set_token( MACRO_VALUE_AND_NAME(TK_OR)          ); goto parser_now;}
      "not"           { set_token( MACRO_VALUE_AND_NAME(TK_NOT)         ); goto parser_now;}
      "=="            { set_token( MACRO_VALUE_AND_NAME(TK_EQ)          ); goto parser_now;}
      "not="          { set_token( MACRO_VALUE_AND_NAME(TK_NE)          ); goto parser_now;}
      ">"             { set_token( MACRO_VALUE_AND_NAME(TK_GT)          ); goto parser_now;}
      ">="            { set_token( MACRO_VALUE_AND_NAME(TK_GE)          ); goto parser_now;}
      "<"             { set_token( MACRO_VALUE_AND_NAME(TK_LT)          ); goto parser_now;}
      "<="            { set_token( MACRO_VALUE_AND_NAME(TK_LE)          ); goto parser_now;}
      
      identifier      { set_token( MACRO_VALUE_AND_NAME(TK_IDENTIFIER ) ); goto parser_now;}
      number          { set_token( MACRO_VALUE_AND_NAME(TK_INT)         ); goto parser_now;}
      
      vartype         { set_token( MACRO_VALUE_AND_NAME(TK_VARTYPE)     ); goto parser_now;}
      
      whitespace      { goto continue_scanning;}
      
      end             { set_token( MACRO_VALUE_AND_NAME(TK_END_OF_LINE) );
                        SCANNER_STATE.linetext = SCANNER_STATE.cursor;    // remove already scanned text, remaining only unconsumed part
                        SCANNER_STATE.line_number++;                     // line counter increase +1
                        goto parser_now;
                      }
      
      // Default rule : Anything else
      any { printf("unexpected character: %c\n", *SCANNER_STATE.cursor+1); goto continue_scanning; }
    */
    
comment:
    /*!re2c
      "*/"          { goto continue_scanning; }
      "\n"          { SCANNER_STATE.line_number++; goto comment; }
      any           { goto comment; }
    */

parser_now:
      if (scanner_DebugMode == true) {
        printf("Line:%d / Col:%d ", SCANNER_STATE.line_number, SCANNER_STATE.column_position);
        printf("parser(%s, %s) \n", SCANNER_STATE.token_name, SCANNER_STATE.token_stringvalue); // Formating number of digits after dot %.15lf
      }
      
      //PARSER( &SCANNER_STATE );
      
      // end inifinite loop when reached end of text
      if( TK_END_OF_FILE == SCANNER_STATE.token_id ) break;
    }//end for loop
    if (scanner_DebugMode == true) puts("\n ** THE END ** \n");
}

