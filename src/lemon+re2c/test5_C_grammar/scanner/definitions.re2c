//definitions.re2c START -----------------------
#include <common.h>  // A library with most common needs when programming
#include <token.h>   // 

bool scanner_DebugMode = false;
struct _scanner_state SCANNER_STATE;

//Parser START----------------------------------------------------------
    
    // header for functions in parser.c  Make sure parser.c is added at compilation time.
    void PARSER_INIT(bool parser_DebugMode);
    void PARSER(const struct _scanner_state * pSCANNER_STATE);
    void PARSER_FREE();
    
//Parser END-----------------------------------------------------------

/*!re2c
    //regex types
    
    // https://www.eso.org/~ndelmott/ascii.html
    // https://c.developpez.com/cours/bernard-cassagne/node17.php#SECTION00383000000000000000
    // LF(Line Feed)=10 CR(Carriage Return)=13
    // carriage return+new line or new line or 0
    // \n for newline (linefeed, character 10)
    // \r for carriage return (character 13 or 15 ?)
    // \0 for null (character 0)
    // \x00  NUL
    // \x0A  newline
    // \x0D  return
    // line endings :
    //    UNIX (\n)
    //    Windows (\r\n)
    //    Macintosh (\r)
    //
    // R* : zero or more occurrences of the regular expression R.
    // R+ : one or more repetition of the regular expression R.
    // R? : zero or one R. That means, there maybe an R or not.
    //-----------------
    // \t  horizontal tabulation
    // \v  vertical tabulation
    // \b  back space
    // \f  form feed
    // \a  audible alert
    //-----------------
    
    end              = ( [\r\n] |"\x00"|"\x0A"|"\x0D" )+;
    whitespace       = ( " " | [\t\v\f] )+;          // whitespace and tabulation
    any              = [\000-\377];
    
    letter           = [a-zA-Z];                     //  will scan one letter at a time, letter after letter
    digit            = [0123456789];                 // [0-9]
    octdigit         = [01234567];                   // [0-7]
    hexdigit         = [digit]+[abcdefABCDEF];      // [A-Fa-f];
    
    IDentifier       = [_a-zA-Z]([_a-zA-Z0-9])*;     // An identifier can never start with a number
    StringLiteral    = '"'(letter)+'"';              // [A-Za-z]+ = word after word
    NumberLiteral    = [123456789](digit)*;          // DecLiteral
    FloatLiteral     = (digit)*'.'(digit)+;          // 
    OctLiteral       = "0"(octdigit)*;               // 
    HexLiteral       = "0x"(hexdigit)+;              // 
    
    vartype          = "u8"|"u16"|"u32"|"u64"|"u128"|"i8"|"i16"|"i32"|"i64"|"i128"|"f16"|"f32"|"f64";
    
*/
//definitions.re2c END -----------------------





//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
    u8          the set of all unsigned  8-bit integers  (0 to 255)
    u16         the set of all unsigned 16-bit integers  (0 to 65535)
    u32         the set of all unsigned 32-bit integers  (0 to 4294967295)
    u64         the set of all unsigned 64-bit integers  (0 to 18446744073709551615)
    i8          the set of all signed  8-bit  integers (-128 to 127)
    i16         the set of all signed 16-bit  integers (-32768 to 32767)
    i32         the set of all signed 32-bit  integers (-2147483648 to 2147483647)
    i64         the set of all signed 64-bit  integers (-9223372036854775808 to 9223372036854775807)
    f16         the set of all IEEE-754-2008 16-bit floating point numbers (10-bit mantissa)
    f32         the set of all IEEE-754 32-bit floating-point numbers
    f64         the set of all IEEE-754 64-bit floating-point numbers
*/


/**********************************************************************
"auto"          {  return(TK_AUTO);            }
"break"         {  return(TK_BREAK);           }
"case"          {  return(TK_CASE);            }
"char"          {  return(TK_CHAR);            }
"const"         {  return(TK_CONST);           }
"continue"      {  return(TK_CONTINUE);        }
"default"       {  return(TK_DEFAULT);         }
"do"            {  return(TK_DO);              }
"double"        {  return(TK_DOUBLE);          }
"else"          {  return(TK_ELSE);            }
"enum"          {  return(TK_ENUM);            }
"extern"        {  return(TK_EXTERN);          }
"float"         {  return(TK_FLOAT);           }
"for"           {  return(TK_FOR);             }
"goto"          {  return(TK_GOTO);            }
"if"            {  return(TK_IF);              }
"int"           {  return(TK_INT);             }
"long"          {  return(TK_LONG);            }
"register"      {  return(TK_REGISTER);        }
"return"        {  return(TK_RETURN);          }
"short"         {  return(TK_SHORT);           }
"signed"        {  return(TK_SIGNED);          }
"sizeof"        {  return(TK_SIZEOF);          }
"static"        {  return(TK_STATIC);          }
"struct"        {  return(TK_STRUCT);          }
"switch"        {  return(TK_SWITCH);          }
"typedef"       {  return(TK_TYPEDEF);         }
"union"         {  return(TK_UNION);           }
"unsigned"      {  return(TK_UNSIGNED);        }
"void"          {  return(TK_VOID);            }
"volatile"      {  return(TK_VOLATILE);        }
"while"         {  return(TK_WHILE);           }

///////////////////////////////////////////////////////////////////////
        "&" => Tok::Ampersand,
        "!=" => Tok::BangEquals,
        "!~" => Tok::BangTilde,
        ":" => Tok::Colon,
        "::" => Tok::ColonColon,
        "," => Tok::Comma,
        ".." => Tok::DotDot,
        "=" => Tok::Equals,
        "==" => Tok::EqualsEquals,
        "=>" => Tok::EqualsGreaterThanCode(<&'input str>),
        "=>?" => Tok::EqualsGreaterThanQuestionCode(<&'input str>),
        "=>@L" => Tok::EqualsGreaterThanLookahead,
        "=>@R" => Tok::EqualsGreaterThanLookbehind,
        ">" => Tok::GreaterThan,
        "#" => Tok::Hash,
        "#![...]" => Tok::ShebangAttribute(<&'input str>),
        "{" => Tok::LeftBrace,
        "[" => Tok::LeftBracket,
        "(" => Tok::LeftParen,
        "<" => Tok::LessThan,
        "@L" => Tok::Lookahead,
        "@R" => Tok::Lookbehind,
        "->" => Tok::MinusGreaterThan,
        "+" => Tok::Plus,
        "?" => Tok::Question,
        "}" => Tok::RightBrace,
        "]" => Tok::RightBracket,
        ")" => Tok::RightParen,
        ";" => Tok::Semi,
        "*" => Tok::Star,
        "~~" => Tok::TildeTilde,
        "_" => Tok::Underscore,

%union
{
    int                     yint;
    char                    ystr[100];
    struct AstNode_tag      *stNode;
}

%token <yint> IF ELSE WHILE BREAK RETURN INT REAL CHAR TRUE FALSE
%token <yint> PRINT PRINTLN READ REPEAT TIMES UNLESS AND OR FOR 

%token <ystr> INT_CONST REAL_CONST TEXT CHAR_CONST
%token <ystr> '*' '/' '+' '-'
%token <ystr> INCREASE_SIGN DECREASE_SIGN NOT_SIGN
%token <ystr> PLUS_EQUALS_SIGN MINUS_EQUALS_SIGN TIMES_EQUALS_SIGN DIVIDE_EQUALS_SIGN
%token <ystr> IS_EQUAL IS_NOT_EQUAL IS_LESS_OR_EQUAL IS_GREATER_OR_EQUAL
%token <ystr> '=' '(' ')' '{' '}' ',' ';'
%token <ystr> ID

%type <stNode> Program MethodsList Method Parameters Formals
%type <stNode> Type Body Declarations DeclarationsList Declaration
%type <stNode> Variables Statements Statement Block Assign
%type <stNode> MethodName Location Expression RelationOperator
%type <stNode> AddExpression AddOperator Term MultiplyOperator
%type <stNode> Factor Actuals Arguments Message MoreMessage
%type <stNode> Printable AssignMultiple NestedAssign Code1
%type <stNode> SimpleStatement IncDec RelationExpression
%type <stNode> AndExpression ChangeAssignSymbol ArrayName

"{"               { return symbol("{",BEGIN); }
"}"               { return symbol("}",END); }

    {Id Head}        = {Letter} + [_]
    {Id Tail}        = {Id Head} + {Digit}
    
    punctuation = [!"#$%&’()*+,-./:;?@[\\\]_‘{|}~];
    
    number   = [0-9]+;                       // [-+]?([0-9]+([.][0-9]*)?|[.][0-9]+)([Ee][-+]?[0-9]+)?;
    real     = [0-9]+[.,][0-9]+;             // do not do -number or +number, You return - and INTEGER separately to the parser, and let the parser handle unary minus.
    
    
    int_des = [uUlL]*;
    bin = '0b' [01]+;
    oct = "0" [0-7]*;
    dec = [1-9][0-9]*;
    hex = '0x' [0-9a-fA-F]+;

***********************************************************************/
    // \a for alarm bell (character 7)
    // \b for backspace (character 8)
    // \t for tab (character 9)
    // \v for vertical tab (character 11), whatever that is.
    // \" for a double quote (character 34 or 42 ?)
    // \' for a single quote (character 39)
    // \\ for a backslash (character 92 or 134 ?)
    // \xCC for an 8-bit character code (where CC is two hex digits)
    // \uCCCC for a 16-bit character code (where CCCC is four hex digits)
    // In modern times, \a, \b and \v are almost never used. \' is only needed in a single-quoted string to represent the single quote mark itself ('\'').
    // Any escape sequences that are not on the list (i.e. backslash followed by anything else) are illegal.
    //-----------------
    // https://steemit.com/programming/@drifter1/writing-a-simple-compiler-on-my-own-a-simple-c-language?q=A+simple+C+Language
    // https://github.com/drifter1/compiler/blob/master/Symbol%20Table%20and%20Lexer/lexer.l
    // https://cs.nyu.edu/rgrimm/xtc/rats-intro.html
    // https://www.lysator.liu.se/c/ANSI-C-grammar-l.html
    // https://stackoverflow.com/questions/2644597/how-do-i-implement-if-statement-in-flex-bison
    //
