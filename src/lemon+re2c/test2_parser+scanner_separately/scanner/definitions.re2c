//definitions.re2c START -----------------------
#include <common.h>  // A library with most common needs when programming
#include <token.h>   // 

bool scanner_DebugMode = false;

/*
R* : zero or more occurrences of the regular expression R.
R+ : one or more repetition of the regular expression R.
R? : zero or one R. That means, there maybe an R or not.
*/
/*!re2c
    //regex types
    end = "\r\n"|"\n"|"\x00";             // carriage return+new line or new line or 0     /// LF(Line Feed)=10 CR(Carriage Return)=13  https://www.eso.org/~ndelmott/ascii.html
    whitespace = [ \t\r\n\v\f]+;          // whitespace
    any = [\000-\377];
    
    letter = [A-Za-z];                    // [A-Za-z]  = will scan one letter at a time, letter after letter
    word = [A-Za-z]+;                     // [A-Za-z]+ = word after word
    number = [0-9]+;                      // integer
    double = [0-9]+.[0-9]*;               // [0-9]+|[0-9]*\.[0-9]+  ///  ([0-9]+[.][0-9]*)|([.][0-9]+)|([0-9]+) ///  [-+]?([0-9]+([.][0-9]*)?|[.][0-9]+)([Ee][-+]?[0-9]+)?;
    digits  = [1-9][0-9]*;                // [0-9][0-9.,]+
    alphanum = [A-Za-z0-9];               // alphanumeric
    identifier = [_a-zA-Z][_a-zA-Z0-9_]*;  // An identifier can never start with a number
    hexadecimal_digits = [A-Fa-f0-9]+;     //
    punctuation = [!"#$%&’()*+,-./:;?@[\\\]_‘{|}~];
    
    dig = [0-9];
    let = [_a-zA-Z_];
    int_des = [uUlL]*;
    
    bin = '0b' [01]+;
    oct = "0" [0-7]*;
    dec = [1-9][0-9]*;
    hex = '0x' [0-9a-fA-F]+;
    
*/
//definitions.re2c END -----------------------
