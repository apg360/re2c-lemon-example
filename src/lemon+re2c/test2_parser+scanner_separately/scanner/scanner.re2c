// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html
//
// With Lemon it is the lexer/tokenizer that calls/initiate the parser
// re2c calls lemon
//----------------------------------------------------------------------

// the contents of 'definitions.re2c' are copy-pasted verbatim in place of the directive
/*!include:re2c "definitions.re2c"*/


struct scanner_state SCANNER_STATE;

void set_token_value(const char *token_type)
{
  sprintf( SCANNER_STATE.tokenvalue, "%s (\'%.*s\')",token_type, (int)(SCANNER_STATE.cursor - SCANNER_STATE.begin), SCANNER_STATE.begin );
}

void SCANNER(const char *the_text)
{
    SCANNER_STATE.begin = the_text;
    SCANNER_STATE.end = the_text + strlen(the_text);
    SCANNER_STATE.cursor = the_text;
    SCANNER_STATE.lexeme = the_text;
    SCANNER_STATE.line_number = 1;
    SCANNER_STATE.column_position = 1;
    
    if (scanner_DebugMode == true) printf("\n ** START Scanning : '%s', ",the_text);
    if (scanner_DebugMode == true) printf("Number of characters %lu\n\n", strlen(the_text));
    bool bFoundSomething_and_token_handled; // if token found and handled in switch case
    
    /*!re2c 
      //configuration
      re2c:define:YYCURSOR = SCANNER_STATE.cursor;
      re2c:define:YYMARKER = SCANNER_STATE.marker;
      re2c:define:YYCTYPE = char;                    // The type of the input characters (code units). For ASCII, EBCDIC and UTF-8 encodings it should be 1-byte unsigned integer.
      re2c:yyfill:enable = 0;
    */
    
    // Infinite loop
    for (;;) {
loop:
    if (SCANNER_STATE.cursor >= SCANNER_STATE.end) {
        SCANNER_STATE.tokentype = END_TOKEN; goto end;
    }
    SCANNER_STATE.begin = SCANNER_STATE.cursor;
    bFoundSomething_and_token_handled = true; // by default assume something were found and handled
    
    /*!re2c
      "/*"            { goto comment; }
      "="             { SCANNER_STATE.tokentype = ASSIGN; goto end;}
      "=="            { SCANNER_STATE.tokentype = CEQ; goto end;}
      '('             { SCANNER_STATE.tokentype = LPAREN; goto end;}
      ")"             { SCANNER_STATE.tokentype = RPAREN; goto end;}
      "{"             { SCANNER_STATE.tokentype = LBRACE; goto end;}
      "}"             { SCANNER_STATE.tokentype = RBRACE; goto end;}
      "_"             { SCANNER_STATE.tokentype = UNDERSCORE; goto end;}
      "."             { SCANNER_STATE.tokentype = DOT; goto end;}
      ","             { SCANNER_STATE.tokentype = COMMA; goto end;}
      ";"             { SCANNER_STATE.tokentype = SEMICOLON; goto end;}
      "u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|i128"           { SCANNER_STATE.tokentype = INT_TYPE; goto end;}
      "return"        { SCANNER_STATE.tokentype = RETURN; goto end;}
      ["]([^"]+)["]   { SCANNER_STATE.tokentype = STRING_LITERAL; goto end;}
      
      let (let|dig)*  { SCANNER_STATE.tokentype = NAME; goto end;}
      identifier|word { SCANNER_STATE.tokentype = NAME; goto end;}
      
      number          { SCANNER_STATE.tokentype = INT_LITERAL; goto end;}
      ("0" [xX] hex+ int_des?) | ("0" dig+ int_des?) | (dig+ int_des?)
      { SCANNER_STATE.tokentype=(INT_LITERAL); goto end;}

      "+"             { SCANNER_STATE.tokentype = ADD; goto end;}
      "-"             { SCANNER_STATE.tokentype = SUB; goto end;}
      "*"             { SCANNER_STATE.tokentype = MUL; goto end;}
      "/"             { SCANNER_STATE.tokentype = DIV; goto end;}

      whitespace      { SCANNER_STATE.tokentype = WHITESPACE; goto end;}
      end { SCANNER_STATE.lexeme = SCANNER_STATE.cursor; SCANNER_STATE.line_number++; goto loop; }
      // Default rule : Anything else
      any { printf("unexpected character: %c\n", *SCANNER_STATE.cursor+1); goto loop; }
    */

comment:
    /*!re2c
      "*/"          { goto loop; }
      "\n"          { SCANNER_STATE.line_number++; goto comment; }
      any           { goto comment; }
    */

end:
    // end inifinite loop when END_TOKEN
    if(END_TOKEN == SCANNER_STATE.tokentype) break;
    
    switch(SCANNER_STATE.tokentype) {
        case SEMICOLON: printf("SEMICOLON"); break;
        case LPAREN: printf("LPAREN"); break;
        case RPAREN: printf("RPAREN"); break;
        case LBRACE: printf("LBRACE"); break;
        case RBRACE: printf("RBRACE"); break;
        case ASSIGN: printf("ASSIGN"); break;
        case CEQ: printf("CEQ"); break;
        case ADD: printf("ADD"); break;
        case SUB: printf("SUB"); break;
        case MUL: printf("MUL"); break;
        case DIV: printf("DIV"); break;
        case INT_TYPE: printf("INT_TYPE"); break;
        case RETURN: printf("RETURN"); break;
        case NAME:
          set_token_value("NAME");
          printf("%s",SCANNER_STATE.tokenvalue);
          break;
        case STRING_LITERAL:
          set_token_value("STRING_LITERAL");
          printf("%s",SCANNER_STATE.tokenvalue);
          break;
        case INT_LITERAL:
          set_token_value("INT_LITERAL");
          printf("%s",SCANNER_STATE.tokenvalue);
          break;
        default:
          //if we ever come here it means nothing were found but NOT handled. No case for the token in switch case
          bFoundSomething_and_token_handled=false;
          set_token_value("Tokentype");
          printf("%s found but not handled, Line %d at Position %d\n",SCANNER_STATE.tokenvalue, SCANNER_STATE.line_number, SCANNER_STATE.column_position);
          break;
    }
    SCANNER_STATE.column_position=(int)(SCANNER_STATE.begin - SCANNER_STATE.lexeme);
    
    if ( bFoundSomething_and_token_handled == true ) {
      printf(" found on Line %d at Position %d\n", SCANNER_STATE.line_number, SCANNER_STATE.column_position);
    }

    }//end for loop
    if (scanner_DebugMode == true) printf("\n ** THE END ** \n");
}

//Parser START----------------------------------------------------------
//header for functions in parser.c  Make sure parser.c is added at compilation time.

#include <parser_definitions.h>
#include <parser.h> // tokens type definition

bool parser_DebugMode = false;
void* theParser;
struct parser_state PARSER_STATE;

void PARSER_INIT(){
  theParser = ParseAlloc(malloc);
  if (parser_DebugMode == true) ParseTrace(stderr, "[Parser] >> ");
}
void PARSER(int token, const double tokenvalue){
  Parse(theParser, token, tokenvalue, &PARSER_STATE);
}
void PARSER_FREE(){
  ParseFree(theParser, free);
}

//Parser END-----------------------------------------------------------
