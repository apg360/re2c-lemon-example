/* Generated by re2c 2.0.3 on Tue Dec 29 23:47:49 2020 */
// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html
//
// With Lemon it is the lexer/tokenizer that calls/initiate the parser
// re2c calls lemon
//----------------------------------------------------------------------

// the contents of 'definitions.re2c' are copy-pasted verbatim in place of the directive
//definitions.re2c START -----------------------
#include "../include/common.h"

typedef enum { FAIL, OK } Result; //typedef enum { false, true } bool;

bool DebugMode = false;

struct scanner_state
{
    const char *cursor; //start
    const char *limit;  //end
    const char *marker;
};

// https://data-flair.training/blogs/union-in-c-language/
// union means only one member can be accessed at a time in a union.
// Only one data member of a union can be accessed at one time.
// Not a struct with many members but a struct with one single member, that can be one of those.
// A union prohibits the initialization of all its data members. The first member of the union can only be initialized through an object.
// ll the data members of a union share the same memory location. Hence, changes made in one data member inevitably affects the other.
union scanner_token
{
    int num;
};

void println(const char *str) {
  printf("%s\n",str);
}

/*
R* : zero or more occurrences of the regular expression R.
R+ : one or more repetition of the regular expression R.
R? : zero or one R. That means, there maybe an R or not.
*/

//definitions.re2c END -----------------------


//Parser START----------------------------------------------------------
//header for functions in parser.c  Make sure parser.c is added at compilation time.
void* ParseAlloc(void* (*allocProc)(size_t));
void ParseFree(void* parser, void(*freeProc)(void*));
void Parse(void* parser, int token, const int);
void ParseTrace(FILE *TraceFILE, char *str);


#include "../parser/parser.h"

void* theParser;

void PARSER_INIT(){
  theParser = ParseAlloc(malloc);
  if (DebugMode == true)ParseTrace(stderr, "[Parser] >> ");
}
void PARSER(int token, const int number){
  Parse(theParser, token, number);
}
void PARSER_FREE(){
  ParseFree(theParser, free);
}

//Parser END-----------------------------------------------------------


int SCANNER(const char *str)
{
    unsigned int lensize = strlen(str);
    const char *YYCURSOR = str;                  // current_char : the next input character to be read.                     A pointer-like l-value that stores the current input position
    const char *YYLIMIT = str + lensize;         // last_char    : the position after the last available input character.   A pointer-like r-value that stores the end of input position
                                                                // Lexer compares YYCURSOR to YYLIMIT in order to determine if there is enough input characters left
    const char *YYMARKER;                        // marker_char  : the position of the most recent match
    const char *lexeme;                          // the next input to be scanned.
    
    if (DebugMode == true) printf("Scanning : '%s'\n",str);
    if (DebugMode == true) printf("Number of characters %u\n",lensize);
    
loop:
    lexeme = YYCURSOR;
    printf("> lexeme : '%s'\n",lexeme);
    
{
	char yych;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case ' ':	goto yy4;
	case '(':	goto yy7;
	case ')':	goto yy9;
	case '*':	goto yy11;
	case '+':	goto yy13;
	case '-':	goto yy15;
	case '/':	goto yy17;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy19;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy22;
	default:
		if (YYLIMIT <= YYCURSOR) goto yyeof2;
		goto yy2;
	}
yy2:
	++YYCURSOR;
	{ println("Scan Failure");
                      return FAIL;}
yy4:
	yych = *++YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\f':
	case '\r':
	case ' ':	goto yy4;
	default:	goto yy6;
	}
yy6:
	{ println("token_wsp"); goto loop;}
yy7:
	++YYCURSOR;
	{ println("token_parenthesis"); goto loop; }
yy9:
	++YYCURSOR;
	{ println("token_parenthesis"); goto loop; }
yy11:
	++YYCURSOR;
	{ println("TOKEN_TIMES");    goto loop; }
yy13:
	++YYCURSOR;
	{ println("TOKEN_PLUS");     goto loop; }
yy15:
	++YYCURSOR;
	{ println("TOKEN_MINUS");    goto loop; }
yy17:
	++YYCURSOR;
	{ println("TOKEN_DIVIDE");   goto loop; }
yy19:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy19;
	default:	goto yy21;
	}
yy21:
	{
        println("TOKEN_INTEGER");
        //token->num = atof(str);
        //printf("> %f \n",atof(str));
        goto loop;
    }
yy22:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy22;
	default:	goto yy24;
	}
yy24:
	{ println("token_word"); goto loop;}
yyeof2:
	{ printf("The scanner has completed successfully.\n");
                      return OK;}
}

}

