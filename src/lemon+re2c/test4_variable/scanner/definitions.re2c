//definitions.re2c START -----------------------
#include <common.h>  // A library with most common needs when programming
#include <token.h>   // 

bool scanner_DebugMode = false;
struct _scanner_state SCANNER_STATE;

//Parser START----------------------------------------------------------
    
    // A way to access the PARSER_STATE variable of inside parser.c
    // Make sure parser.c is added at compilation time.
    // variable name must be same as the one in parser.lemon
    extern const struct _parser_state PARSER_STATE;
    //printf("Result : %f\n",PARSER_STATE.result_value.number);
    
    // header for functions in parser.c  Make sure parser.c is added at compilation time.
    void PARSER_INIT(bool parser_DebugMode);
    void PARSER(const struct _Token * pToken);
    void PARSER_FREE();
    
//Parser END-----------------------------------------------------------

/*
R* : zero or more occurrences of the regular expression R.
R+ : one or more repetition of the regular expression R.
R? : zero or one R. That means, there maybe an R or not.
*/
/*!re2c
    //regex types
    
    // https://www.eso.org/~ndelmott/ascii.html
    // https://c.developpez.com/cours/bernard-cassagne/node17.php#SECTION00383000000000000000
    // LF(Line Feed)=10 CR(Carriage Return)=13
    // carriage return+new line or new line or 0
    // \n  new line
    // \r  carriage return
    // \x00  NUL
    // \x0A  newline
    // \x0D  return
    //-----------------
    // \t  horizontal tabulation
    // \v  vertical tabulation
    // \b  back space
    // \f  form feed
    // \a  audible alert
    //-----------------
    // \n for newline (linefeed, character 10)
    // \r for carriage return (character 13)
    // \0 for null (character 0)
    //  \a for alarm bell (character 7)
    // \b for backspace (character 8)
    // \t for tab (character 9)
    // \v for vertical tab (character 11), whatever that is.
    // \" for a double quote (character 34)
    // \' for a single quote (character 39)
    // \\ for a backslash (character 92)
    // \xCC for an 8-bit character code (where CC is two hex digits)
    // \uCCCC for a 16-bit character code (where CCCC is four hex digits)
    // In modern times, \a, \b and \v are almost never used. \' is only needed in a single-quoted string to represent the single quote mark itself ('\'').
    // Any escape sequences that are not on the list (i.e. backslash followed by anything else) are illegal.
    //-----------------
    // line endings :
    //    UNIX (\n)
    //    Windows (\r\n)
    //    Macintosh (\r)
    // https://steemit.com/programming/@drifter1/writing-a-simple-compiler-on-my-own-a-simple-c-language?q=A+simple+C+Language
    // https://github.com/drifter1/compiler/blob/master/Symbol%20Table%20and%20Lexer/lexer.l
    
    end = ( [\r\n] |"\x00"|"\x0A"|"\x0D" )+;
    whitespace = ( " " | [\t\v\f] )+;      // whitespace and tabulation
    any = [\000-\377];
    
    letter = [A-Za-z];                     // [A-Za-z]  = will scan one letter at a time, letter after letter
    word   = [A-Za-z]+;                    // [A-Za-z]+ = word after word
    number = [0-9]+;                       // do not do -number or +number, You return - and INTEGER separately to the parser, and let the parser handle unary minus.
                                           //      [-+]?([0-9]+([.][0-9]*)?|[.][0-9]+)([Ee][-+]?[0-9]+)?;
    double = [0-9]+.[0-9]*;                // [0-9][0-9.,]+   [0-9]+|[0-9]*\.[0-9]+  ///  ([0-9]+[.][0-9]*)|([.][0-9]+)|([0-9]+)
    digits = [1-9][0-9]*;                  // 
    alphanum = [A-Za-z0-9];                // alphanumeric
    identifier = [_a-zA-Z][_a-zA-Z0-9_]*;  // An identifier can never start with a number
    hexadecimal_digits = [A-Fa-f0-9]+;     //
    punctuation = [!"#$%&’()*+,-./:;?@[\\\]_‘{|}~];
    
    dig = [0-9];
    let = [_a-zA-Z_];
    int_des = [uUlL]*;
    
    bin = '0b' [01]+;
    oct = "0" [0-7]*;
    dec = [1-9][0-9]*;
    hex = '0x' [0-9a-fA-F]+;
    
*/
//definitions.re2c END -----------------------
