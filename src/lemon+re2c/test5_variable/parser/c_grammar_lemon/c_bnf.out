State 0:
          program ::= * input
      (1) input ::= *
          input ::= * input lines

                       program accept
                         input shift        41     
                     {default} reduce       1      input ::=

State 1:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= LBRACKET * RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= LBRACKET * statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= LBRACKET * declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET * declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          statement_list ::= * statement
          statement_list ::= * statement_list statement
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
                      RBRACKET shift-reduce 155    compound_statement ::= LBRACKET RBRACKET
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                   declaration shift        2        /* because declaration==declaration_list */
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                     statement shift        6        /* because statement==statement_list */
             labeled_statement shift        6        /* because labeled_statement==statement */
            compound_statement shift        6        /* because compound_statement==statement */
          expression_statement shift        6        /* because expression_statement==statement */
           selection_statement shift        6        /* because selection_statement==statement */
           iteration_statement shift        6        /* because iteration_statement==statement */
                jump_statement shift        6        /* because jump_statement==statement */
                statement_list shift        6      
              declaration_list shift        2      

State 2:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= LBRACKET declaration_list * RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET declaration_list * statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          statement_list ::= * statement
          statement_list ::= * statement_list statement
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
                      RBRACKET shift-reduce 157    compound_statement ::= LBRACKET declaration_list RBRACKET
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                   declaration shift-reduce 160    declaration_list ::= declaration_list declaration
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                     statement shift        5        /* because statement==statement_list */
             labeled_statement shift        5        /* because labeled_statement==statement */
            compound_statement shift        5        /* because compound_statement==statement */
          expression_statement shift        5        /* because expression_statement==statement */
           selection_statement shift        5        /* because selection_statement==statement */
           iteration_statement shift        5        /* because iteration_statement==statement */
                jump_statement shift        5        /* because jump_statement==statement */
                statement_list shift        5      

State 3:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          primary_expression ::= LPAREN * expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_expression ::= SIZEOF LPAREN * type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_name ::= * specifier_qualifier_list
          type_name ::= * specifier_qualifier_list abstract_declarator

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        138    
            postfix_expression shift        100    
         assignment_expression shift        138      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
                     type_name shift        172    
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        138      /* because conditional_expression==assignment_expression */
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
      specifier_qualifier_list shift        89     

State 4:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          primary_expression ::= LPAREN * expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          cast_expression ::= LPAREN * type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_name ::= * specifier_qualifier_list
          type_name ::= * specifier_qualifier_list abstract_declarator

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        138    
            postfix_expression shift        100    
         assignment_expression shift        138      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
                     type_name shift        147    
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        138      /* because conditional_expression==assignment_expression */
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
      specifier_qualifier_list shift        89     

State 5:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET declaration_list statement_list * RBRACKET
          statement_list ::= statement_list * statement
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
                      RBRACKET shift-reduce 158    compound_statement ::= LBRACKET declaration_list statement_list RBRACKET
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 162    statement_list ::= statement_list statement
             labeled_statement shift-reduce 162    statement_list ::= statement_list statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 162    statement_list ::= statement_list statement  /* because compound_statement==statement */
          expression_statement shift-reduce 162    statement_list ::= statement_list statement  /* because expression_statement==statement */
           selection_statement shift-reduce 162    statement_list ::= statement_list statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 162    statement_list ::= statement_list statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 162    statement_list ::= statement_list statement  /* because jump_statement==statement */

State 6:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= LBRACKET statement_list * RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          statement_list ::= statement_list * statement
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
                      RBRACKET shift-reduce 156    compound_statement ::= LBRACKET statement_list RBRACKET
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 162    statement_list ::= statement_list statement
             labeled_statement shift-reduce 162    statement_list ::= statement_list statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 162    statement_list ::= statement_list statement  /* because compound_statement==statement */
          expression_statement shift-reduce 162    statement_list ::= statement_list statement  /* because expression_statement==statement */
           selection_statement shift-reduce 162    statement_list ::= statement_list statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 162    statement_list ::= statement_list statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 162    statement_list ::= statement_list statement  /* because jump_statement==statement */

State 7:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN * statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement
             labeled_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because compound_statement==statement */
          expression_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because expression_statement==statement */
           selection_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 168    iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement  /* because jump_statement==statement */

State 8:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN * statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement
             labeled_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because compound_statement==statement */
          expression_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because expression_statement==statement */
           selection_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 169    iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement  /* because jump_statement==statement */

State 9:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          selection_statement ::= SWITCH LPAREN expression RPAREN * statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement
             labeled_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because compound_statement==statement */
          expression_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because expression_statement==statement */
           selection_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 167    selection_statement ::= SWITCH LPAREN expression RPAREN statement  /* because jump_statement==statement */

State 10:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= IF LPAREN expression RPAREN statement ELSE * statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement
             labeled_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because compound_statement==statement */
          expression_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because expression_statement==statement */
           selection_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 166    selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement  /* because jump_statement==statement */

State 11:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= IF LPAREN expression RPAREN * statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= IF LPAREN expression RPAREN * statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement
             labeled_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because compound_statement==statement */
          expression_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because expression_statement==statement */
           selection_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 165    selection_statement ::= IF LPAREN expression RPAREN statement  /* because jump_statement==statement */

State 12:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          labeled_statement ::= DEFAULT COLON * statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement
             labeled_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because compound_statement==statement */
          expression_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because expression_statement==statement */
           selection_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 154    labeled_statement ::= DEFAULT COLON statement  /* because jump_statement==statement */

State 13:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= CASE constant_expression COLON * statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement
             labeled_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because compound_statement==statement */
          expression_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because expression_statement==statement */
           selection_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 153    labeled_statement ::= CASE constant_expression COLON statement  /* because jump_statement==statement */

State 14:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= IDENTIFIER COLON * statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          selection_statement ::= * IF LPAREN expression RPAREN statement
          selection_statement ::= * IF LPAREN expression RPAREN statement ELSE statement
          selection_statement ::= * SWITCH LPAREN expression RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= * FOR LPAREN expression_statement expression_statement expression RPAREN statement
          jump_statement ::= * CONTINUE SEMCOL
          jump_statement ::= * BREAK SEMCOL
          jump_statement ::= * BREAK expression SEMCOL
          jump_statement ::= * RETURN SEMCOL
          jump_statement ::= * RETURN expression SEMCOL

                    IDENTIFIER shift        146    
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                          CASE shift        32     
                       DEFAULT shift        144    
                            IF shift        143    
                        SWITCH shift        142    
                           FOR shift        141    
                      CONTINUE shift        140    
                         BREAK shift        20     
                        RETURN shift        19     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
                      LBRACKET shift        1      
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
                     statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement
             labeled_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because labeled_statement==statement */
            compound_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because compound_statement==statement */
          expression_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because expression_statement==statement */
           selection_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because selection_statement==statement */
           iteration_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because iteration_statement==statement */
                jump_statement shift-reduce 152    labeled_statement ::= IDENTIFIER COLON statement  /* because jump_statement==statement */

State 15:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          iteration_statement ::= FOR LPAREN expression_statement * expression_statement RPAREN statement
          iteration_statement ::= FOR LPAREN expression_statement * expression_statement expression RPAREN statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
          expression_statement shift        21     

State 16:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          expression_statement ::= * SEMCOL
          expression_statement ::= * expression SEMCOL
          iteration_statement ::= FOR LPAREN * expression_statement expression_statement RPAREN statement
          iteration_statement ::= FOR LPAREN * expression_statement expression_statement expression RPAREN statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 163    expression_statement ::= SEMCOL
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        112    
            postfix_expression shift        100    
         assignment_expression shift        112      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        112      /* because conditional_expression==assignment_expression */
          expression_statement shift        15     

State 17:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= LBRACKET * initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET
          initializer ::= LBRACKET * initializer_list COMMA RBRACKET
          initializer_list ::= * initializer
          initializer_list ::= * initializer_list COMMA initializer

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                      LBRACKET shift        17     
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift        113      /* because assignment_expression==initializer_list */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        113      /* because conditional_expression==assignment_expression */
                   initializer shift        113      /* because initializer==initializer_list */
              initializer_list shift        113    

State 18:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET
          initializer ::= LBRACKET initializer_list COMMA * RBRACKET
          initializer_list ::= initializer_list COMMA * initializer

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                      LBRACKET shift        17     
                      RBRACKET shift-reduce 143    initializer ::= LBRACKET initializer_list COMMA RBRACKET
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift-reduce 145    initializer_list ::= initializer_list COMMA initializer  /* because assignment_expression==initializer */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 145    initializer_list ::= initializer_list COMMA initializer  /* because conditional_expression==assignment_expression */
                   initializer shift-reduce 145    initializer_list ::= initializer_list COMMA initializer

State 19:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          jump_statement ::= RETURN * SEMCOL
          jump_statement ::= RETURN * expression SEMCOL

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 173    jump_statement ::= RETURN SEMCOL
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        107    
            postfix_expression shift        100    
         assignment_expression shift        107      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        107      /* because conditional_expression==assignment_expression */

State 20:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          jump_statement ::= BREAK * SEMCOL
          jump_statement ::= BREAK * expression SEMCOL

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                        SEMCOL shift-reduce 171    jump_statement ::= BREAK SEMCOL
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        108    
            postfix_expression shift        100    
         assignment_expression shift        108      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        108      /* because conditional_expression==assignment_expression */

State 21:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          iteration_statement ::= FOR LPAREN expression_statement expression_statement * RPAREN statement
          iteration_statement ::= FOR LPAREN expression_statement expression_statement * expression RPAREN statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                        RPAREN shift        7      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        109    
            postfix_expression shift        100    
         assignment_expression shift        109      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        109      /* because conditional_expression==assignment_expression */

State 22:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= postfix_expression LPAREN * RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= postfix_expression LPAREN * argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          argument_expression_list ::= * assignment_expression
          argument_expression_list ::= * argument_expression_list COMMA assignment_expression
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                        RPAREN shift-reduce 10     postfix_expression ::= postfix_expression LPAREN RPAREN
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
      argument_expression_list shift        114    
         assignment_expression shift        114      /* because assignment_expression==argument_expression_list */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        114      /* because conditional_expression==assignment_expression */

State 23:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          init_declarator ::= declarator ASSIGN * initializer
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                      LBRACKET shift        17     
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift-reduce 74     init_declarator ::= declarator ASSIGN initializer  /* because assignment_expression==initializer */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 74     init_declarator ::= declarator ASSIGN initializer  /* because conditional_expression==assignment_expression */
                   initializer shift-reduce 74     init_declarator ::= declarator ASSIGN initializer

State 24:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          selection_statement ::= SWITCH LPAREN * expression RPAREN statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        110    
            postfix_expression shift        100    
         assignment_expression shift        110      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        110      /* because conditional_expression==assignment_expression */

State 25:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          selection_statement ::= IF LPAREN * expression RPAREN statement
          selection_statement ::= IF LPAREN * expression RPAREN statement ELSE statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        111    
            postfix_expression shift        100    
         assignment_expression shift        111      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        111      /* because conditional_expression==assignment_expression */

State 26:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          conditional_expression ::= logical_or_expression QUESTION * expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        125    
            postfix_expression shift        100    
         assignment_expression shift        125      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        125      /* because conditional_expression==assignment_expression */

State 27:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          primary_expression ::= LPAREN * expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        138    
            postfix_expression shift        100    
         assignment_expression shift        138      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        138      /* because conditional_expression==assignment_expression */

State 28:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= postfix_expression LSQUAREB * expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
                    expression shift        137    
            postfix_expression shift        100    
         assignment_expression shift        137      /* because assignment_expression==expression */
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        137      /* because conditional_expression==assignment_expression */

State 29:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_abstract_declarator ::= LSQUAREB * RSQUAREB
          direct_abstract_declarator ::= LSQUAREB * constant_expression RSQUAREB

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                      RSQUAREB shift-reduce 133    direct_abstract_declarator ::= LSQUAREB RSQUAREB
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        151      /* because conditional_expression==constant_expression */
           constant_expression shift        151    

State 30:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB * RSQUAREB
          direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB * constant_expression RSQUAREB

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                      RSQUAREB shift-reduce 135    direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB RSQUAREB
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        154      /* because conditional_expression==constant_expression */
           constant_expression shift        154    

State 31:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_declarator ::= direct_declarator LSQUAREB * constant_expression RSQUAREB
          direct_declarator ::= direct_declarator LSQUAREB * RSQUAREB

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                      RSQUAREB shift-reduce 108    direct_declarator ::= direct_declarator LSQUAREB RSQUAREB
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        161      /* because conditional_expression==constant_expression */
           constant_expression shift        161    

State 32:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          labeled_statement ::= CASE * constant_expression COLON statement

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift        145      /* because conditional_expression==constant_expression */
           constant_expression shift        145    

State 33:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          argument_expression_list ::= argument_expression_list COMMA * assignment_expression
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift-reduce 17     argument_expression_list ::= argument_expression_list COMMA assignment_expression
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 17     argument_expression_list ::= argument_expression_list COMMA assignment_expression  /* because conditional_expression==assignment_expression */

State 34:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          enumerator ::= IDENTIFIER ASSIGN * constant_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 101    enumerator ::= IDENTIFIER ASSIGN constant_expression  /* because conditional_expression==constant_expression */
           constant_expression shift-reduce 101    enumerator ::= IDENTIFIER ASSIGN constant_expression

State 35:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          struct_declarator ::= COLON * constant_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 93     struct_declarator ::= COLON constant_expression  /* because conditional_expression==constant_expression */
           constant_expression shift-reduce 93     struct_declarator ::= COLON constant_expression

State 36:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          struct_declarator ::= declarator COLON * constant_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 94     struct_declarator ::= declarator COLON constant_expression  /* because conditional_expression==constant_expression */
           constant_expression shift-reduce 94     struct_declarator ::= declarator COLON constant_expression

State 37:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          assignment_expression ::= unary_expression assignment_operator * assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift-reduce 58     assignment_expression ::= unary_expression assignment_operator assignment_expression
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 58     assignment_expression ::= unary_expression assignment_operator assignment_expression  /* because conditional_expression==assignment_expression */

State 38:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= expression COMMA * assignment_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
         assignment_expression shift-reduce 61     expression ::= expression COMMA assignment_expression
              unary_expression shift        96     
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 61     expression ::= expression COMMA assignment_expression  /* because conditional_expression==assignment_expression */

State 39:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTION expression COLON conditional_expression
          conditional_expression ::= logical_or_expression QUESTION expression COLON * conditional_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        166    
         logical_or_expression shift        126    
        conditional_expression shift-reduce 56     conditional_expression ::= logical_or_expression QUESTION expression COLON conditional_expression

State 40:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= LPAREN * declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= LPAREN * abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= LPAREN * RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= LPAREN * parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        LPAREN shift        40     
                        RPAREN shift-reduce 137    direct_abstract_declarator ::= LPAREN RPAREN
                      LSQUAREB shift        29     
                          STAR shift        91     
        declaration_specifiers shift        81     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
                    declarator shift        155    
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                       pointer shift        92     
             direct_declarator shift        117    
           parameter_type_list shift        150    
                parameter_list shift        156    
         parameter_declaration shift        156      /* because parameter_declaration==parameter_list */
           abstract_declarator shift        152    
    direct_abstract_declarator shift        116    

State 41:
      (0) program ::= input *
          input ::= input * lines
          lines ::= * translation_unit END_OF_LINE|END_OF_FILE
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          translation_unit ::= * external_declaration
          translation_unit ::= * translation_unit external_declaration
          external_declaration ::= * function_definition
          external_declaration ::= * declaration
          function_definition ::= * declaration_specifiers declarator declaration_list compound_statement
          function_definition ::= * declaration_specifiers declarator compound_statement
          function_definition ::= * declarator declaration_list compound_statement
          function_definition ::= * declarator compound_statement

                             $ reduce       0      program ::= input
                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        LPAREN shift        90     
                          STAR shift        91     
                         lines shift-reduce 2      input ::= input lines
              translation_unit shift        43     
                   declaration shift        43       /* because declaration==translation_unit */
        declaration_specifiers shift        83     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
                    declarator shift        50     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                       pointer shift        98     
             direct_declarator shift        117    
          external_declaration shift        43       /* because external_declaration==translation_unit */
           function_definition shift        43       /* because function_definition==external_declaration */

State 42:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression AND_OP inclusive_or_expression
          logical_or_expression ::= logical_or_expression OR_OP * logical_and_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        168    
        logical_and_expression shift        164    

State 43:
          lines ::= translation_unit * END_OF_LINE|END_OF_FILE
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          translation_unit ::= translation_unit * external_declaration
          external_declaration ::= * function_definition
          external_declaration ::= * declaration
          function_definition ::= * declaration_specifiers declarator declaration_list compound_statement
          function_definition ::= * declaration_specifiers declarator compound_statement
          function_definition ::= * declarator declaration_list compound_statement
          function_definition ::= * declarator compound_statement

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                   END_OF_LINE shift-reduce 3      lines ::= translation_unit END_OF_LINE|END_OF_FILE
                   END_OF_FILE shift-reduce 3      lines ::= translation_unit END_OF_LINE|END_OF_FILE
                        LPAREN shift        90     
                          STAR shift        91     
                   declaration shift-reduce 176    translation_unit ::= translation_unit external_declaration  /* because declaration==external_declaration */
        declaration_specifiers shift        83     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
                    declarator shift        50     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                       pointer shift        98     
             direct_declarator shift        117    
          external_declaration shift-reduce 176    translation_unit ::= translation_unit external_declaration
           function_definition shift-reduce 176    translation_unit ::= translation_unit external_declaration  /* because function_definition==external_declaration */

State 44:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= LPAREN * abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= LPAREN * RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= LPAREN * parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        LPAREN shift        44     
                        RPAREN shift-reduce 137    direct_abstract_declarator ::= LPAREN RPAREN
                      LSQUAREB shift        29     
                          STAR shift        91     
        declaration_specifiers shift        81     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                       pointer shift        97     
           parameter_type_list shift        150    
                parameter_list shift        156    
         parameter_declaration shift        156      /* because parameter_declaration==parameter_list */
           abstract_declarator shift        152    
    direct_abstract_declarator shift        116    

State 45:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression PIPE exclusive_or_expression
          logical_and_expression ::= logical_and_expression AND_OP * inclusive_or_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        170    
       inclusive_or_expression shift        165    

State 46:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= inclusive_or_expression PIPE * exclusive_or_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        171    
       exclusive_or_expression shift        167    

State 47:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          direct_declarator ::= direct_declarator LPAREN * parameter_type_list RPAREN
          direct_declarator ::= direct_declarator LPAREN * identifier_list RPAREN
          direct_declarator ::= direct_declarator LPAREN * RPAREN
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          identifier_list ::= * IDENTIFIER
          identifier_list ::= * identifier_list COMMA IDENTIFIER

                    IDENTIFIER shift-reduce 125    identifier_list ::= IDENTIFIER
                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        RPAREN shift-reduce 111    direct_declarator ::= direct_declarator LPAREN RPAREN
        declaration_specifiers shift        81     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
           parameter_type_list shift        158    
               identifier_list shift        118    
                parameter_list shift        156    
         parameter_declaration shift        156      /* because parameter_declaration==parameter_list */

State 48:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression REF equality_expression
          exclusive_or_expression ::= exclusive_or_expression XOR * and_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        128    
                and_expression shift        169    

State 49:
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
     (73) init_declarator ::= declarator *
          init_declarator ::= declarator * ASSIGN initializer
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          function_definition ::= declaration_specifiers declarator * declaration_list compound_statement
          function_definition ::= declaration_specifiers declarator * compound_statement

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        ASSIGN shift        23     
                      LBRACKET shift        1      
                   declaration shift        54       /* because declaration==declaration_list */
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            compound_statement shift-reduce 180    function_definition ::= declaration_specifiers declarator compound_statement
              declaration_list shift        54     
                     {default} reduce       73     init_declarator ::= declarator

State 50:
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          function_definition ::= declarator * declaration_list compound_statement
          function_definition ::= declarator * compound_statement

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      LBRACKET shift        1      
                   declaration shift        53       /* because declaration==declaration_list */
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            compound_statement shift-reduce 182    function_definition ::= declarator compound_statement
              declaration_list shift        53     

State 51:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          direct_abstract_declarator ::= direct_abstract_declarator LPAREN * RPAREN
          direct_abstract_declarator ::= direct_abstract_declarator LPAREN * parameter_type_list RPAREN

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                        RPAREN shift-reduce 139    direct_abstract_declarator ::= direct_abstract_declarator LPAREN RPAREN
        declaration_specifiers shift        81     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
           parameter_type_list shift        153    
                parameter_list shift        156    
         parameter_declaration shift        156      /* because parameter_declaration==parameter_list */

State 52:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= and_expression REF * equality_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        103    
           equality_expression shift        127    

State 53:
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          function_definition ::= declarator declaration_list * compound_statement

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      LBRACKET shift        1      
                   declaration shift-reduce 160    declaration_list ::= declaration_list declaration
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            compound_statement shift-reduce 181    function_definition ::= declarator declaration_list compound_statement

State 54:
          declaration ::= * declaration_specifiers SEMCOL
          declaration ::= * declaration_specifiers init_declarator_list SEMCOL
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          function_definition ::= declaration_specifiers declarator declaration_list * compound_statement

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      LBRACKET shift        1      
                   declaration shift-reduce 160    declaration_list ::= declaration_list declaration
        declaration_specifiers shift        80     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            compound_statement shift-reduce 179    function_definition ::= declaration_specifiers declarator declaration_list compound_statement

State 55:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= equality_expression NE_OP * relational_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        101    

State 56:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LT shift_expression
          relational_expression ::= * relational_expression GT shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= equality_expression EQ_OP * relational_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        135    
         relational_expression shift        102    

State 57:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          parameter_type_list ::= parameter_list COMMA * ELLIPSIS
          parameter_list ::= parameter_list COMMA * parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      ELLIPSIS shift-reduce 119    parameter_type_list ::= parameter_list COMMA ELLIPSIS
        declaration_specifiers shift        81     
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
         parameter_declaration shift-reduce 121    parameter_list ::= parameter_list COMMA parameter_declaration

State 58:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union LBRACKET * struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          struct_declaration_list ::= * struct_declaration
          struct_declaration_list ::= * struct_declaration_list struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMCOL
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
       struct_declaration_list shift        67     
            struct_declaration shift        67       /* because struct_declaration==struct_declaration_list */
      specifier_qualifier_list shift        82     

State 59:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACKET * struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          struct_declaration_list ::= * struct_declaration
          struct_declaration_list ::= * struct_declaration_list struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMCOL
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
       struct_declaration_list shift        68     
            struct_declaration shift        68       /* because struct_declaration==struct_declaration_list */
      specifier_qualifier_list shift        82     

State 60:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression GE_OP * shift_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        129    

State 61:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression LE_OP * shift_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        130    

State 62:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression GT * shift_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        131    

State 63:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression LT * shift_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        136    
              shift_expression shift        132    

State 64:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
     (69) declaration_specifiers ::= type_qualifier *
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          declaration_specifiers ::= type_qualifier * declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
        declaration_specifiers shift-reduce 70     declaration_specifiers ::= type_qualifier declaration_specifiers
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                     {default} reduce       69     declaration_specifiers ::= type_qualifier

State 65:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
     (67) declaration_specifiers ::= type_specifier *
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= type_specifier * declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
        declaration_specifiers shift-reduce 68     declaration_specifiers ::= type_specifier declaration_specifiers
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                     {default} reduce       67     declaration_specifiers ::= type_specifier

State 66:
          declaration_specifiers ::= * storage_class_specifier
     (65) declaration_specifiers ::= storage_class_specifier *
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= storage_class_specifier * declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                       TYPEDEF shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        EXTERN shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                        STATIC shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          AUTO shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                      REGISTER shift-reduce 75     storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
        declaration_specifiers shift-reduce 66     declaration_specifiers ::= storage_class_specifier declaration_specifiers
       storage_class_specifier shift        66     
                type_specifier shift        65     
                type_qualifier shift        64     
     struct_or_union_specifier shift        65       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        65       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
                     {default} reduce       65     declaration_specifiers ::= storage_class_specifier

State 67:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union LBRACKET struct_declaration_list * RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          struct_declaration_list ::= struct_declaration_list * struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMCOL
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      RBRACKET shift-reduce 80     struct_or_union_specifier ::= struct_or_union LBRACKET struct_declaration_list RBRACKET
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            struct_declaration shift-reduce 84     struct_declaration_list ::= struct_declaration_list struct_declaration
      specifier_qualifier_list shift        82     

State 68:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACKET struct_declaration_list * RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          struct_declaration_list ::= struct_declaration_list * struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMCOL
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                      RBRACKET shift-reduce 79     struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
            struct_declaration shift-reduce 84     struct_declaration_list ::= struct_declaration_list struct_declaration
      specifier_qualifier_list shift        82     

State 69:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= shift_expression RIGHT_OP * additive_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        133    

State 70:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= shift_expression LEFT_OP * additive_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        106      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        106      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        106    
           additive_expression shift        134    

State 71:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= type_qualifier * specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
     (89) specifier_qualifier_list ::= type_qualifier *
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
      specifier_qualifier_list shift-reduce 88     specifier_qualifier_list ::= type_qualifier specifier_qualifier_list
                     {default} reduce       89     specifier_qualifier_list ::= type_qualifier

State 72:
          type_specifier ::= * VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT|UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= type_specifier * specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
     (87) specifier_qualifier_list ::= type_specifier *
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST

                     TYPE_NAME shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          CHAR shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         SHORT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                           INT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                          LONG shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        SIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                      UNSIGNED shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         FLOAT shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        DOUBLE shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                         CONST shift-reduce 102    type_qualifier ::= CONST
                          VOID shift-reduce 76     type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME
                        STRUCT shift-reduce 82     struct_or_union ::= STRUCT|UNION
                         UNION shift-reduce 82     struct_or_union ::= STRUCT|UNION
                          ENUM shift        121    
                type_specifier shift        72     
                type_qualifier shift        71     
     struct_or_union_specifier shift        72       /* because struct_or_union_specifier==type_specifier */
                enum_specifier shift        72       /* because enum_specifier==type_specifier */
               struct_or_union shift        124    
      specifier_qualifier_list shift-reduce 86     specifier_qualifier_list ::= type_specifier specifier_qualifier_list
                     {default} reduce       87     specifier_qualifier_list ::= type_specifier

State 73:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= additive_expression MINUS * multiplicative_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        104      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        104      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        104    

State 74:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression STAR cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= additive_expression PLUS * multiplicative_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift        105      /* because unary_expression==multiplicative_expression */
                unary_operator shift        79     
               cast_expression shift        105      /* because cast_expression==multiplicative_expression */
     multiplicative_expression shift        105    

State 75:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          cast_expression ::= LPAREN type_name RPAREN * cast_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 26     cast_expression ::= LPAREN type_name RPAREN cast_expression  /* because unary_expression==cast_expression */
                unary_operator shift        79     
               cast_expression shift-reduce 26     cast_expression ::= LPAREN type_name RPAREN cast_expression

State 76:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= multiplicative_expression MOD * cast_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 30     multiplicative_expression ::= multiplicative_expression MOD cast_expression  /* because unary_expression==cast_expression */
                unary_operator shift        79     
               cast_expression shift-reduce 30     multiplicative_expression ::= multiplicative_expression MOD cast_expression

State 77:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= multiplicative_expression DIV * cast_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 29     multiplicative_expression ::= multiplicative_expression DIV cast_expression  /* because unary_expression==cast_expression */
                unary_operator shift        79     
               cast_expression shift-reduce 29     multiplicative_expression ::= multiplicative_expression DIV cast_expression

State 78:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression
          multiplicative_expression ::= multiplicative_expression STAR * cast_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 28     multiplicative_expression ::= multiplicative_expression STAR cast_expression  /* because unary_expression==cast_expression */
                unary_operator shift        79     
               cast_expression shift-reduce 28     multiplicative_expression ::= multiplicative_expression STAR cast_expression

State 79:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= unary_operator * cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT
          cast_expression ::= * unary_expression
          cast_expression ::= * LPAREN type_name RPAREN cast_expression

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        4      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 21     unary_expression ::= unary_operator cast_expression  /* because unary_expression==cast_expression */
                unary_operator shift        79     
               cast_expression shift-reduce 21     unary_expression ::= unary_operator cast_expression

State 80:
          declaration ::= declaration_specifiers * SEMCOL
          declaration ::= declaration_specifiers * init_declarator_list SEMCOL
          init_declarator_list ::= * init_declarator
          init_declarator_list ::= * init_declarator_list COMMA init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator ASSIGN initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
                        SEMCOL shift-reduce 63     declaration ::= declaration_specifiers SEMCOL
          init_declarator_list shift        139    
               init_declarator shift        139      /* because init_declarator==init_declarator_list */
                    declarator shift        173    
                       pointer shift        98     
             direct_declarator shift        117    

State 81:
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          parameter_declaration ::= declaration_specifiers * declarator
          parameter_declaration ::= declaration_specifiers * abstract_declarator
    (124) parameter_declaration ::= declaration_specifiers *
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        40     
                      LSQUAREB shift        29     
                          STAR shift        91     
                    declarator shift-reduce 122    parameter_declaration ::= declaration_specifiers declarator
                       pointer shift        92     
             direct_declarator shift        117    
           abstract_declarator shift-reduce 123    parameter_declaration ::= declaration_specifiers abstract_declarator
    direct_abstract_declarator shift        116    
                     {default} reduce       124    parameter_declaration ::= declaration_specifiers

State 82:
          struct_declaration ::= specifier_qualifier_list * struct_declarator_list SEMCOL
          struct_declarator_list ::= * struct_declarator
          struct_declarator_list ::= * struct_declarator_list COMMA struct_declarator
          struct_declarator ::= * declarator
          struct_declarator ::= * COLON constant_expression
          struct_declarator ::= * declarator COLON constant_expression
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
                         COLON shift        35     
                    declarator shift        162    
        struct_declarator_list shift        123    
             struct_declarator shift        123      /* because struct_declarator==struct_declarator_list */
                       pointer shift        98     
             direct_declarator shift        117    

State 83:
          declaration ::= declaration_specifiers * SEMCOL
          declaration ::= declaration_specifiers * init_declarator_list SEMCOL
          init_declarator_list ::= * init_declarator
          init_declarator_list ::= * init_declarator_list COMMA init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator ASSIGN initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          function_definition ::= declaration_specifiers * declarator declaration_list compound_statement
          function_definition ::= declaration_specifiers * declarator compound_statement

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
                        SEMCOL shift-reduce 63     declaration ::= declaration_specifiers SEMCOL
          init_declarator_list shift        139    
               init_declarator shift        139      /* because init_declarator==init_declarator_list */
                    declarator shift        49     
                       pointer shift        98     
             direct_declarator shift        117    

State 84:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= SIZEOF * unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_expression ::= SIZEOF * LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        3      
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 22     unary_expression ::= SIZEOF unary_expression
                unary_operator shift        79     

State 85:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= DEC_OP * unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        27     
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 20     unary_expression ::= DEC_OP unary_expression
                unary_operator shift        79     

State 86:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPAREN expression RPAREN
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LSQUAREB expression RSQUAREB
          postfix_expression ::= * postfix_expression LPAREN RPAREN
          postfix_expression ::= * postfix_expression LPAREN argument_expression_list RPAREN
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= INC_OP * unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPAREN type_name RPAREN
          unary_operator ::= * REF|STAR|PLUS|MINUS|TILDE|NOT

                    IDENTIFIER shift-reduce 4      primary_expression ::= IDENTIFIER
                      CONSTANT shift-reduce 5      primary_expression ::= CONSTANT
                STRING_LITERAL shift-reduce 6      primary_expression ::= STRING_LITERAL
                        SIZEOF shift        84     
                        INC_OP shift        86     
                        DEC_OP shift        85     
                        LPAREN shift        27     
                           REF shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          STAR shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                          PLUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         MINUS shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                         TILDE shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
                           NOT shift-reduce 24     unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT
            primary_expression shift        100      /* because primary_expression==postfix_expression */
            postfix_expression shift        100    
              unary_expression shift-reduce 19     unary_expression ::= INC_OP unary_expression
                unary_operator shift        79     

State 87:
          struct_declarator_list ::= struct_declarator_list COMMA * struct_declarator
          struct_declarator ::= * declarator
          struct_declarator ::= * COLON constant_expression
          struct_declarator ::= * declarator COLON constant_expression
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
                         COLON shift        35     
                    declarator shift        162    
             struct_declarator shift-reduce 91     struct_declarator_list ::= struct_declarator_list COMMA struct_declarator
                       pointer shift        98     
             direct_declarator shift        117    

State 88:
          init_declarator_list ::= init_declarator_list COMMA * init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator ASSIGN initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
               init_declarator shift-reduce 72     init_declarator_list ::= init_declarator_list COMMA init_declarator
                    declarator shift        173    
                       pointer shift        98     
             direct_declarator shift        117    

State 89:
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
    (127) type_name ::= specifier_qualifier_list *
          type_name ::= specifier_qualifier_list * abstract_declarator
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                        LPAREN shift        44     
                      LSQUAREB shift        29     
                          STAR shift        91     
                       pointer shift        97     
           abstract_declarator shift-reduce 128    type_name ::= specifier_qualifier_list abstract_declarator
    direct_abstract_declarator shift        116    
                     {default} reduce       127    type_name ::= specifier_qualifier_list

State 90:
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= LPAREN * declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
                          STAR shift        91     
                    declarator shift        155    
                       pointer shift        98     
             direct_declarator shift        117    

State 91:
          type_qualifier ::= * CONST
          pointer ::= * STAR
    (112) pointer ::= STAR *
          pointer ::= * STAR type_qualifier_list
          pointer ::= STAR * type_qualifier_list
          pointer ::= * STAR pointer
          pointer ::= STAR * pointer
          pointer ::= * STAR type_qualifier_list pointer
          pointer ::= STAR * type_qualifier_list pointer
          type_qualifier_list ::= * type_qualifier
          type_qualifier_list ::= * type_qualifier_list type_qualifier

                         CONST shift-reduce 102    type_qualifier ::= CONST
                          STAR shift        91     
                type_qualifier shift        93       /* because type_qualifier==type_qualifier_list */
                       pointer shift-reduce 114    pointer ::= STAR pointer
           type_qualifier_list shift        93     
                     {default} reduce       112    pointer ::= STAR

State 92:
          declarator ::= pointer * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN
    (129) abstract_declarator ::= pointer *
          abstract_declarator ::= pointer * direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        40     
                      LSQUAREB shift        29     
             direct_declarator shift        122    
    direct_abstract_declarator shift        115    
                     {default} reduce       129    abstract_declarator ::= pointer

State 93:
          type_qualifier ::= * CONST
          pointer ::= * STAR
          pointer ::= * STAR type_qualifier_list
    (113) pointer ::= STAR type_qualifier_list *
          pointer ::= * STAR pointer
          pointer ::= * STAR type_qualifier_list pointer
          pointer ::= STAR type_qualifier_list * pointer
          type_qualifier_list ::= type_qualifier_list * type_qualifier

                         CONST shift-reduce 102    type_qualifier ::= CONST
                          STAR shift        91     
                type_qualifier shift-reduce 117    type_qualifier_list ::= type_qualifier_list type_qualifier
                       pointer shift-reduce 115    pointer ::= STAR type_qualifier_list pointer
                     {default} reduce       113    pointer ::= STAR type_qualifier_list

State 94:
          enum_specifier ::= ENUM IDENTIFIER LBRACKET * enumerator_list RBRACKET
          enumerator_list ::= * enumerator
          enumerator_list ::= * enumerator_list COMMA enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER ASSIGN constant_expression

                    IDENTIFIER shift        160    
               enumerator_list shift        119    
                    enumerator shift        119      /* because enumerator==enumerator_list */

State 95:
          enum_specifier ::= ENUM LBRACKET * enumerator_list RBRACKET
          enumerator_list ::= * enumerator
          enumerator_list ::= * enumerator_list COMMA enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER ASSIGN constant_expression

                    IDENTIFIER shift        160    
               enumerator_list shift        120    
                    enumerator shift        120      /* because enumerator==enumerator_list */

State 96:
     (25) cast_expression ::= unary_expression *
          assignment_expression ::= unary_expression * assignment_operator assignment_expression
          assignment_operator ::= * ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN

                   STAR_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    DIV_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    MOD_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    ADD_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    SUB_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                   LEFT_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                  RIGHT_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    AND_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                    XOR_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                     OR_ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
                        ASSIGN shift-reduce 59     assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN
           assignment_operator shift        37     
                     {default} reduce       25     cast_expression ::= unary_expression

State 97:
    (129) abstract_declarator ::= pointer *
          abstract_declarator ::= pointer * direct_abstract_declarator
          direct_abstract_declarator ::= * LPAREN abstract_declarator RPAREN
          direct_abstract_declarator ::= * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB RSQUAREB
          direct_abstract_declarator ::= * direct_abstract_declarator LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= * LPAREN RPAREN
          direct_abstract_declarator ::= * LPAREN parameter_type_list RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN RPAREN
          direct_abstract_declarator ::= * direct_abstract_declarator LPAREN parameter_type_list RPAREN

                        LPAREN shift        44     
                      LSQUAREB shift        29     
    direct_abstract_declarator shift        115    
                     {default} reduce       129    abstract_declarator ::= pointer

State 98:
          declarator ::= pointer * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPAREN declarator RPAREN
          direct_declarator ::= * direct_declarator LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= * direct_declarator LSQUAREB RSQUAREB
          direct_declarator ::= * direct_declarator LPAREN parameter_type_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN identifier_list RPAREN
          direct_declarator ::= * direct_declarator LPAREN RPAREN

                    IDENTIFIER shift-reduce 105    direct_declarator ::= IDENTIFIER
                        LPAREN shift        90     
             direct_declarator shift        122    

State 99:
          enumerator_list ::= enumerator_list COMMA * enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER ASSIGN constant_expression

                    IDENTIFIER shift        160    
                    enumerator shift-reduce 99     enumerator_list ::= enumerator_list COMMA enumerator

State 100:
          postfix_expression ::= postfix_expression * LSQUAREB expression RSQUAREB
          postfix_expression ::= postfix_expression * LPAREN RPAREN
          postfix_expression ::= postfix_expression * LPAREN argument_expression_list RPAREN
          postfix_expression ::= postfix_expression * DOT IDENTIFIER
          postfix_expression ::= postfix_expression * PTR_OP IDENTIFIER
          postfix_expression ::= postfix_expression * INC_OP
          postfix_expression ::= postfix_expression * DEC_OP
     (18) unary_expression ::= postfix_expression *

                        PTR_OP shift        148    
                        INC_OP shift-reduce 14     postfix_expression ::= postfix_expression INC_OP
                        DEC_OP shift-reduce 15     postfix_expression ::= postfix_expression DEC_OP
                        LPAREN shift        22     
                      LSQUAREB shift        28     
                           DOT shift        149    
                     {default} reduce       18     unary_expression ::= postfix_expression

State 101:
          relational_expression ::= relational_expression * LT shift_expression
          relational_expression ::= relational_expression * GT shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (44) equality_expression ::= equality_expression NE_OP relational_expression *

                         LE_OP shift        61     
                         GE_OP shift        60     
                            LT shift        63     
                            GT shift        62     
                     {default} reduce       44     equality_expression ::= equality_expression NE_OP relational_expression

State 102:
          relational_expression ::= relational_expression * LT shift_expression
          relational_expression ::= relational_expression * GT shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (43) equality_expression ::= equality_expression EQ_OP relational_expression *

                         LE_OP shift        61     
                         GE_OP shift        60     
                            LT shift        63     
                            GT shift        62     
                     {default} reduce       43     equality_expression ::= equality_expression EQ_OP relational_expression

State 103:
          relational_expression ::= relational_expression * LT shift_expression
          relational_expression ::= relational_expression * GT shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (42) equality_expression ::= relational_expression *

                         LE_OP shift        61     
                         GE_OP shift        60     
                            LT shift        63     
                            GT shift        62     
                     {default} reduce       42     equality_expression ::= relational_expression

State 104:
          multiplicative_expression ::= multiplicative_expression * STAR cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (33) additive_expression ::= additive_expression MINUS multiplicative_expression *

                          STAR shift        78     
                           DIV shift        77     
                           MOD shift        76     
                     {default} reduce       33     additive_expression ::= additive_expression MINUS multiplicative_expression

State 105:
          multiplicative_expression ::= multiplicative_expression * STAR cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (32) additive_expression ::= additive_expression PLUS multiplicative_expression *

                          STAR shift        78     
                           DIV shift        77     
                           MOD shift        76     
                     {default} reduce       32     additive_expression ::= additive_expression PLUS multiplicative_expression

State 106:
          multiplicative_expression ::= multiplicative_expression * STAR cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (31) additive_expression ::= multiplicative_expression *

                          STAR shift        78     
                           DIV shift        77     
                           MOD shift        76     
                     {default} reduce       31     additive_expression ::= multiplicative_expression

State 107:
          expression ::= expression * COMMA assignment_expression
          jump_statement ::= RETURN expression * SEMCOL

                         COMMA shift        38     
                        SEMCOL shift-reduce 174    jump_statement ::= RETURN expression SEMCOL

State 108:
          expression ::= expression * COMMA assignment_expression
          jump_statement ::= BREAK expression * SEMCOL

                         COMMA shift        38     
                        SEMCOL shift-reduce 172    jump_statement ::= BREAK expression SEMCOL

State 109:
          expression ::= expression * COMMA assignment_expression
          iteration_statement ::= FOR LPAREN expression_statement expression_statement expression * RPAREN statement

                        RPAREN shift        8      
                         COMMA shift        38     

State 110:
          expression ::= expression * COMMA assignment_expression
          selection_statement ::= SWITCH LPAREN expression * RPAREN statement

                        RPAREN shift        9      
                         COMMA shift        38     

State 111:
          expression ::= expression * COMMA assignment_expression
          selection_statement ::= IF LPAREN expression * RPAREN statement
          selection_statement ::= IF LPAREN expression * RPAREN statement ELSE statement

                        RPAREN shift        11     
                         COMMA shift        38     

State 112:
          expression ::= expression * COMMA assignment_expression
          expression_statement ::= expression * SEMCOL

                         COMMA shift        38     
                        SEMCOL shift-reduce 164    expression_statement ::= expression SEMCOL

State 113:
          initializer ::= LBRACKET initializer_list * RBRACKET
          initializer ::= LBRACKET initializer_list * COMMA RBRACKET
          initializer_list ::= initializer_list * COMMA initializer

                         COMMA shift        18     
                      RBRACKET shift-reduce 142    initializer ::= LBRACKET initializer_list RBRACKET

State 114:
          postfix_expression ::= postfix_expression LPAREN argument_expression_list * RPAREN
          argument_expression_list ::= argument_expression_list * COMMA assignment_expression

                        RPAREN shift-reduce 11     postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN
                         COMMA shift        33     

State 115:
    (131) abstract_declarator ::= pointer direct_abstract_declarator *
          direct_abstract_declarator ::= direct_abstract_declarator * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= direct_abstract_declarator * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= direct_abstract_declarator * LPAREN RPAREN
          direct_abstract_declarator ::= direct_abstract_declarator * LPAREN parameter_type_list RPAREN

                        LPAREN shift        51     
                      LSQUAREB shift        30     
                     {default} reduce       131    abstract_declarator ::= pointer direct_abstract_declarator

State 116:
    (130) abstract_declarator ::= direct_abstract_declarator *
          direct_abstract_declarator ::= direct_abstract_declarator * LSQUAREB RSQUAREB
          direct_abstract_declarator ::= direct_abstract_declarator * LSQUAREB constant_expression RSQUAREB
          direct_abstract_declarator ::= direct_abstract_declarator * LPAREN RPAREN
          direct_abstract_declarator ::= direct_abstract_declarator * LPAREN parameter_type_list RPAREN

                        LPAREN shift        51     
                      LSQUAREB shift        30     
                     {default} reduce       130    abstract_declarator ::= direct_abstract_declarator

State 117:
    (104) declarator ::= direct_declarator *
          direct_declarator ::= direct_declarator * LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= direct_declarator * LSQUAREB RSQUAREB
          direct_declarator ::= direct_declarator * LPAREN parameter_type_list RPAREN
          direct_declarator ::= direct_declarator * LPAREN identifier_list RPAREN
          direct_declarator ::= direct_declarator * LPAREN RPAREN

                        LPAREN shift        47     
                      LSQUAREB shift        31     
                     {default} reduce       104    declarator ::= direct_declarator

State 118:
          direct_declarator ::= direct_declarator LPAREN identifier_list * RPAREN
          identifier_list ::= identifier_list * COMMA IDENTIFIER

                        RPAREN shift-reduce 110    direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN
                         COMMA shift        157    

State 119:
          enum_specifier ::= ENUM IDENTIFIER LBRACKET enumerator_list * RBRACKET
          enumerator_list ::= enumerator_list * COMMA enumerator

                         COMMA shift        99     
                      RBRACKET shift-reduce 96     enum_specifier ::= ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET

State 120:
          enum_specifier ::= ENUM LBRACKET enumerator_list * RBRACKET
          enumerator_list ::= enumerator_list * COMMA enumerator

                         COMMA shift        99     
                      RBRACKET shift-reduce 95     enum_specifier ::= ENUM LBRACKET enumerator_list RBRACKET

State 121:
          enum_specifier ::= ENUM * LBRACKET enumerator_list RBRACKET
          enum_specifier ::= ENUM * IDENTIFIER LBRACKET enumerator_list RBRACKET
          enum_specifier ::= ENUM * IDENTIFIER

                    IDENTIFIER shift        159    
                      LBRACKET shift        95     

State 122:
    (103) declarator ::= pointer direct_declarator *
          direct_declarator ::= direct_declarator * LSQUAREB constant_expression RSQUAREB
          direct_declarator ::= direct_declarator * LSQUAREB RSQUAREB
          direct_declarator ::= direct_declarator * LPAREN parameter_type_list RPAREN
          direct_declarator ::= direct_declarator * LPAREN identifier_list RPAREN
          direct_declarator ::= direct_declarator * LPAREN RPAREN

                        LPAREN shift        47     
                      LSQUAREB shift        31     
                     {default} reduce       103    declarator ::= pointer direct_declarator

State 123:
          struct_declaration ::= specifier_qualifier_list struct_declarator_list * SEMCOL
          struct_declarator_list ::= struct_declarator_list * COMMA struct_declarator

                         COMMA shift        87     
                        SEMCOL shift-reduce 85     struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMCOL

State 124:
          struct_or_union_specifier ::= struct_or_union * IDENTIFIER LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union * LBRACKET struct_declaration_list RBRACKET
          struct_or_union_specifier ::= struct_or_union * IDENTIFIER

                    IDENTIFIER shift        163    
                      LBRACKET shift        58     

State 125:
          conditional_expression ::= logical_or_expression QUESTION expression * COLON conditional_expression
          expression ::= expression * COMMA assignment_expression

                         COMMA shift        38     
                         COLON shift        39     

State 126:
          logical_or_expression ::= logical_or_expression * OR_OP logical_and_expression
     (55) conditional_expression ::= logical_or_expression *
          conditional_expression ::= logical_or_expression * QUESTION expression COLON conditional_expression

                         OR_OP shift        42     
                      QUESTION shift        26     
                     {default} reduce       55     conditional_expression ::= logical_or_expression

State 127:
          equality_expression ::= equality_expression * EQ_OP relational_expression
          equality_expression ::= equality_expression * NE_OP relational_expression
     (46) and_expression ::= and_expression REF equality_expression *

                         EQ_OP shift        56     
                         NE_OP shift        55     
                     {default} reduce       46     and_expression ::= and_expression REF equality_expression

State 128:
          equality_expression ::= equality_expression * EQ_OP relational_expression
          equality_expression ::= equality_expression * NE_OP relational_expression
     (45) and_expression ::= equality_expression *

                         EQ_OP shift        56     
                         NE_OP shift        55     
                     {default} reduce       45     and_expression ::= equality_expression

State 129:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (41) relational_expression ::= relational_expression GE_OP shift_expression *

                       LEFT_OP shift        70     
                      RIGHT_OP shift        69     
                     {default} reduce       41     relational_expression ::= relational_expression GE_OP shift_expression

State 130:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (40) relational_expression ::= relational_expression LE_OP shift_expression *

                       LEFT_OP shift        70     
                      RIGHT_OP shift        69     
                     {default} reduce       40     relational_expression ::= relational_expression LE_OP shift_expression

State 131:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (39) relational_expression ::= relational_expression GT shift_expression *

                       LEFT_OP shift        70     
                      RIGHT_OP shift        69     
                     {default} reduce       39     relational_expression ::= relational_expression GT shift_expression

State 132:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (38) relational_expression ::= relational_expression LT shift_expression *

                       LEFT_OP shift        70     
                      RIGHT_OP shift        69     
                     {default} reduce       38     relational_expression ::= relational_expression LT shift_expression

State 133:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (36) shift_expression ::= shift_expression RIGHT_OP additive_expression *

                          PLUS shift        74     
                         MINUS shift        73     
                     {default} reduce       36     shift_expression ::= shift_expression RIGHT_OP additive_expression

State 134:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (35) shift_expression ::= shift_expression LEFT_OP additive_expression *

                          PLUS shift        74     
                         MINUS shift        73     
                     {default} reduce       35     shift_expression ::= shift_expression LEFT_OP additive_expression

State 135:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (37) relational_expression ::= shift_expression *

                       LEFT_OP shift        70     
                      RIGHT_OP shift        69     
                     {default} reduce       37     relational_expression ::= shift_expression

State 136:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (34) shift_expression ::= additive_expression *

                          PLUS shift        74     
                         MINUS shift        73     
                     {default} reduce       34     shift_expression ::= additive_expression

State 137:
          postfix_expression ::= postfix_expression LSQUAREB expression * RSQUAREB
          expression ::= expression * COMMA assignment_expression

                      RSQUAREB shift-reduce 9      postfix_expression ::= postfix_expression LSQUAREB expression RSQUAREB
                         COMMA shift        38     

State 138:
          primary_expression ::= LPAREN expression * RPAREN
          expression ::= expression * COMMA assignment_expression

                        RPAREN shift-reduce 7      primary_expression ::= LPAREN expression RPAREN
                         COMMA shift        38     

State 139:
          declaration ::= declaration_specifiers init_declarator_list * SEMCOL
          init_declarator_list ::= init_declarator_list * COMMA init_declarator

                         COMMA shift        88     
                        SEMCOL shift-reduce 64     declaration ::= declaration_specifiers init_declarator_list SEMCOL

State 140:
          jump_statement ::= CONTINUE * SEMCOL

                        SEMCOL shift-reduce 170    jump_statement ::= CONTINUE SEMCOL

State 141:
          iteration_statement ::= FOR * LPAREN expression_statement expression_statement RPAREN statement
          iteration_statement ::= FOR * LPAREN expression_statement expression_statement expression RPAREN statement

                        LPAREN shift        16     

State 142:
          selection_statement ::= SWITCH * LPAREN expression RPAREN statement

                        LPAREN shift        24     

State 143:
          selection_statement ::= IF * LPAREN expression RPAREN statement
          selection_statement ::= IF * LPAREN expression RPAREN statement ELSE statement

                        LPAREN shift        25     

State 144:
          labeled_statement ::= DEFAULT * COLON statement

                         COLON shift        12     

State 145:
          labeled_statement ::= CASE constant_expression * COLON statement

                         COLON shift        13     

State 146:
      (4) primary_expression ::= IDENTIFIER *
          labeled_statement ::= IDENTIFIER * COLON statement

                         COLON shift        14     
                     {default} reduce       4      primary_expression ::= IDENTIFIER

State 147:
          cast_expression ::= LPAREN type_name * RPAREN cast_expression

                        RPAREN shift        75     

State 148:
          postfix_expression ::= postfix_expression PTR_OP * IDENTIFIER

                    IDENTIFIER shift-reduce 13     postfix_expression ::= postfix_expression PTR_OP IDENTIFIER

State 149:
          postfix_expression ::= postfix_expression DOT * IDENTIFIER

                    IDENTIFIER shift-reduce 12     postfix_expression ::= postfix_expression DOT IDENTIFIER

State 150:
          direct_abstract_declarator ::= LPAREN parameter_type_list * RPAREN

                        RPAREN shift-reduce 138    direct_abstract_declarator ::= LPAREN parameter_type_list RPAREN

State 151:
          direct_abstract_declarator ::= LSQUAREB constant_expression * RSQUAREB

                      RSQUAREB shift-reduce 134    direct_abstract_declarator ::= LSQUAREB constant_expression RSQUAREB

State 152:
          direct_abstract_declarator ::= LPAREN abstract_declarator * RPAREN

                        RPAREN shift-reduce 132    direct_abstract_declarator ::= LPAREN abstract_declarator RPAREN

State 153:
          direct_abstract_declarator ::= direct_abstract_declarator LPAREN parameter_type_list * RPAREN

                        RPAREN shift-reduce 140    direct_abstract_declarator ::= direct_abstract_declarator LPAREN parameter_type_list RPAREN

State 154:
          direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB constant_expression * RSQUAREB

                      RSQUAREB shift-reduce 136    direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB constant_expression RSQUAREB

State 155:
          direct_declarator ::= LPAREN declarator * RPAREN

                        RPAREN shift-reduce 106    direct_declarator ::= LPAREN declarator RPAREN

State 156:
    (118) parameter_type_list ::= parameter_list *
          parameter_type_list ::= parameter_list * COMMA ELLIPSIS
          parameter_list ::= parameter_list * COMMA parameter_declaration

                         COMMA shift        57     
                     {default} reduce       118    parameter_type_list ::= parameter_list

State 157:
          identifier_list ::= identifier_list COMMA * IDENTIFIER

                    IDENTIFIER shift-reduce 126    identifier_list ::= identifier_list COMMA IDENTIFIER

State 158:
          direct_declarator ::= direct_declarator LPAREN parameter_type_list * RPAREN

                        RPAREN shift-reduce 109    direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN

State 159:
          enum_specifier ::= ENUM IDENTIFIER * LBRACKET enumerator_list RBRACKET
     (97) enum_specifier ::= ENUM IDENTIFIER *

                      LBRACKET shift        94     
                     {default} reduce       97     enum_specifier ::= ENUM IDENTIFIER

State 160:
    (100) enumerator ::= IDENTIFIER *
          enumerator ::= IDENTIFIER * ASSIGN constant_expression

                        ASSIGN shift        34     
                     {default} reduce       100    enumerator ::= IDENTIFIER

State 161:
          direct_declarator ::= direct_declarator LSQUAREB constant_expression * RSQUAREB

                      RSQUAREB shift-reduce 107    direct_declarator ::= direct_declarator LSQUAREB constant_expression RSQUAREB

State 162:
     (92) struct_declarator ::= declarator *
          struct_declarator ::= declarator * COLON constant_expression

                         COLON shift        36     
                     {default} reduce       92     struct_declarator ::= declarator

State 163:
          struct_or_union_specifier ::= struct_or_union IDENTIFIER * LBRACKET struct_declaration_list RBRACKET
     (81) struct_or_union_specifier ::= struct_or_union IDENTIFIER *

                      LBRACKET shift        59     
                     {default} reduce       81     struct_or_union_specifier ::= struct_or_union IDENTIFIER

State 164:
          logical_and_expression ::= logical_and_expression * AND_OP inclusive_or_expression
     (54) logical_or_expression ::= logical_or_expression OR_OP logical_and_expression *

                        AND_OP shift        45     
                     {default} reduce       54     logical_or_expression ::= logical_or_expression OR_OP logical_and_expression

State 165:
          inclusive_or_expression ::= inclusive_or_expression * PIPE exclusive_or_expression
     (52) logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression *

                          PIPE shift        46     
                     {default} reduce       52     logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression

State 166:
          logical_and_expression ::= logical_and_expression * AND_OP inclusive_or_expression
     (53) logical_or_expression ::= logical_and_expression *

                        AND_OP shift        45     
                     {default} reduce       53     logical_or_expression ::= logical_and_expression

State 167:
          exclusive_or_expression ::= exclusive_or_expression * XOR and_expression
     (50) inclusive_or_expression ::= inclusive_or_expression PIPE exclusive_or_expression *

                           XOR shift        48     
                     {default} reduce       50     inclusive_or_expression ::= inclusive_or_expression PIPE exclusive_or_expression

State 168:
          inclusive_or_expression ::= inclusive_or_expression * PIPE exclusive_or_expression
     (51) logical_and_expression ::= inclusive_or_expression *

                          PIPE shift        46     
                     {default} reduce       51     logical_and_expression ::= inclusive_or_expression

State 169:
          and_expression ::= and_expression * REF equality_expression
     (48) exclusive_or_expression ::= exclusive_or_expression XOR and_expression *

                           REF shift        52     
                     {default} reduce       48     exclusive_or_expression ::= exclusive_or_expression XOR and_expression

State 170:
          exclusive_or_expression ::= exclusive_or_expression * XOR and_expression
     (49) inclusive_or_expression ::= exclusive_or_expression *

                           XOR shift        48     
                     {default} reduce       49     inclusive_or_expression ::= exclusive_or_expression

State 171:
          and_expression ::= and_expression * REF equality_expression
     (47) exclusive_or_expression ::= and_expression *

                           REF shift        52     
                     {default} reduce       47     exclusive_or_expression ::= and_expression

State 172:
          unary_expression ::= SIZEOF LPAREN type_name * RPAREN

                        RPAREN shift-reduce 23     unary_expression ::= SIZEOF LPAREN type_name RPAREN

State 173:
     (73) init_declarator ::= declarator *
          init_declarator ::= declarator * ASSIGN initializer

                        ASSIGN shift        23     
                     {default} reduce       73     init_declarator ::= declarator

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: IDENTIFIER (precedence=1)
    2: CONSTANT (precedence=1)
    3: STRING_LITERAL (precedence=1)
    4: SIZEOF (precedence=1)
    5: PTR_OP (precedence=2)
    6: INC_OP (precedence=2)
    7: DEC_OP (precedence=2)
    8: LEFT_OP (precedence=2)
    9: RIGHT_OP (precedence=2)
   10: LE_OP (precedence=2)
   11: GE_OP (precedence=2)
   12: EQ_OP (precedence=2)
   13: NE_OP (precedence=2)
   14: AND_OP (precedence=3)
   15: OR_OP (precedence=3)
   16: STAR_ASSIGN (precedence=3)
   17: DIV_ASSIGN (precedence=3)
   18: MOD_ASSIGN (precedence=3)
   19: ADD_ASSIGN (precedence=3)
   20: SUB_ASSIGN (precedence=4)
   21: LEFT_ASSIGN (precedence=4)
   22: RIGHT_ASSIGN (precedence=4)
   23: AND_ASSIGN (precedence=4)
   24: XOR_ASSIGN (precedence=5)
   25: OR_ASSIGN (precedence=5)
   26: TYPE_NAME (precedence=5)
   27: TYPEDEF (precedence=6)
   28: EXTERN (precedence=6)
   29: STATIC (precedence=6)
   30: AUTO (precedence=6)
   31: REGISTER (precedence=6)
   32: CHAR (precedence=7)
   33: SHORT (precedence=7)
   34: INT (precedence=7)
   35: LONG (precedence=7)
   36: SIGNED (precedence=7)
   37: UNSIGNED (precedence=7)
   38: FLOAT (precedence=7)
   39: DOUBLE (precedence=7)
   40: CONST (precedence=7)
   41: VOLATILE (precedence=7)
   42: VOID (precedence=7)
   43: STRUCT (precedence=8)
   44: UNION (precedence=8)
   45: ENUM (precedence=8)
   46: ELLIPSIS (precedence=8)
   47: CASE (precedence=9)
   48: DEFAULT (precedence=9)
   49: IF (precedence=9)
   50: ELSE (precedence=9)
   51: SWITCH (precedence=9)
   52: WHILE (precedence=9)
   53: DO (precedence=9)
   54: FOR (precedence=9)
   55: GOTO (precedence=9)
   56: CONTINUE (precedence=9)
   57: BREAK (precedence=9)
   58: RETURN (precedence=9)
   59: END_OF_LINE
   60: END_OF_FILE
   61: LPAREN
   62: RPAREN
   63: LSQUAREB
   64: RSQUAREB
   65: DOT
   66: COMMA
   67: REF
   68: STAR
   69: PLUS
   70: MINUS
   71: TILDE
   72: NOT
   73: DIV
   74: MOD
   75: LT
   76: GT
   77: XOR
   78: PIPE
   79: QUESTION
   80: COLON
   81: ASSIGN
   82: SEMCOL
   83: LBRACKET
   84: RBRACKET
   85: program: <lambda> IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
   86: input: <lambda> IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
   87: lines: IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
   88: translation_unit: IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
   89: primary_expression: IDENTIFIER CONSTANT STRING_LITERAL LPAREN
   90: expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   91: postfix_expression: IDENTIFIER CONSTANT STRING_LITERAL LPAREN
   92: argument_expression_list: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   93: assignment_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   94: unary_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   95: unary_operator: REF STAR PLUS MINUS TILDE NOT
   96: cast_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   97: type_name: TYPE_NAME CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
   98: multiplicative_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
   99: additive_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  100: shift_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  101: relational_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  102: equality_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  103: and_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  104: exclusive_or_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  105: inclusive_or_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  106: logical_and_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  107: logical_or_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  108: conditional_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  109: assignment_operator: STAR_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN ASSIGN
  110: constant_expression: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT
  111: declaration: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  112: declaration_specifiers: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  113: init_declarator_list: IDENTIFIER LPAREN STAR
  114: storage_class_specifier: TYPEDEF EXTERN STATIC AUTO REGISTER
  115: type_specifier: TYPE_NAME CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE VOID STRUCT UNION ENUM
  116: type_qualifier: CONST
  117: init_declarator: IDENTIFIER LPAREN STAR
  118: declarator: IDENTIFIER LPAREN STAR
  119: initializer: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT LBRACKET
  120: struct_or_union_specifier: STRUCT UNION
  121: enum_specifier: ENUM
  122: struct_or_union: STRUCT UNION
  123: struct_declaration_list: TYPE_NAME CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  124: struct_declaration: TYPE_NAME CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  125: specifier_qualifier_list: TYPE_NAME CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  126: struct_declarator_list: IDENTIFIER LPAREN STAR COLON
  127: struct_declarator: IDENTIFIER LPAREN STAR COLON
  128: enumerator_list: IDENTIFIER
  129: enumerator: IDENTIFIER
  130: pointer: STAR
  131: direct_declarator: IDENTIFIER LPAREN
  132: parameter_type_list: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  133: identifier_list: IDENTIFIER
  134: type_qualifier_list: CONST
  135: parameter_list: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  136: parameter_declaration: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  137: abstract_declarator: LPAREN LSQUAREB STAR
  138: direct_abstract_declarator: LPAREN LSQUAREB
  139: initializer_list: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT LBRACKET
  140: statement: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP CASE DEFAULT IF SWITCH FOR CONTINUE BREAK RETURN LPAREN REF STAR PLUS MINUS TILDE NOT SEMCOL LBRACKET
  141: labeled_statement: IDENTIFIER CASE DEFAULT
  142: compound_statement: LBRACKET
  143: expression_statement: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP LPAREN REF STAR PLUS MINUS TILDE NOT SEMCOL
  144: selection_statement: IF SWITCH
  145: iteration_statement: FOR
  146: jump_statement: CONTINUE BREAK RETURN
  147: statement_list: IDENTIFIER CONSTANT STRING_LITERAL SIZEOF INC_OP DEC_OP CASE DEFAULT IF SWITCH FOR CONTINUE BREAK RETURN LPAREN REF STAR PLUS MINUS TILDE NOT SEMCOL LBRACKET
  148: declaration_list: TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM
  149: external_declaration: IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
  150: function_definition: IDENTIFIER TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOID STRUCT UNION ENUM LPAREN STAR
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ IDENTIFIER CONSTANT STRING_LITERAL SIZEOF PTR_OP INC_OP DEC_OP LEFT_OP
RIGHT_OP LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP STAR_ASSIGN DIV_ASSIGN
MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
XOR_ASSIGN OR_ASSIGN TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER CHAR
SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID STRUCT UNION
ENUM ELLIPSIS CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK
RETURN END_OF_LINE END_OF_FILE LPAREN RPAREN LSQUAREB RSQUAREB DOT COMMA REF
STAR PLUS MINUS TILDE NOT DIV MOD LT GT XOR PIPE QUESTION COLON ASSIGN
SEMCOL LBRACKET RBRACKET program input lines translation_unit
primary_expression expression postfix_expression argument_expression_list
assignment_expression unary_expression unary_operator cast_expression
type_name multiplicative_expression additive_expression shift_expression
relational_expression equality_expression and_expression
exclusive_or_expression inclusive_or_expression logical_and_expression
logical_or_expression conditional_expression assignment_operator
constant_expression declaration declaration_specifiers init_declarator_list
storage_class_specifier type_specifier type_qualifier init_declarator
declarator initializer struct_or_union_specifier enum_specifier
struct_or_union struct_declaration_list struct_declaration
specifier_qualifier_list struct_declarator_list struct_declarator
enumerator_list enumerator pointer direct_declarator parameter_type_list
identifier_list type_qualifier_list parameter_list parameter_declaration
abstract_declarator direct_abstract_declarator initializer_list statement
labeled_statement compound_statement expression_statement
selection_statement iteration_statement jump_statement statement_list
declaration_list external_declaration function_definition
----------------------------------------------------
Rules:
   0: program ::= input.
   1: input ::=.
   2: input ::= input lines.
   3: lines ::= translation_unit END_OF_LINE|END_OF_FILE.
   4: primary_expression ::= IDENTIFIER. [IDENTIFIER precedence=1]
   5: primary_expression ::= CONSTANT. [CONSTANT precedence=1]
   6: primary_expression ::= STRING_LITERAL. [STRING_LITERAL precedence=1]
   7: primary_expression ::= LPAREN expression RPAREN.
   8: postfix_expression ::= primary_expression.
   9: postfix_expression ::= postfix_expression LSQUAREB expression RSQUAREB.
  10: postfix_expression ::= postfix_expression LPAREN RPAREN.
  11: postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN.
  12: postfix_expression ::= postfix_expression DOT IDENTIFIER. [IDENTIFIER precedence=1]
  13: postfix_expression ::= postfix_expression PTR_OP IDENTIFIER. [PTR_OP precedence=2]
  14: postfix_expression ::= postfix_expression INC_OP. [INC_OP precedence=2]
  15: postfix_expression ::= postfix_expression DEC_OP. [DEC_OP precedence=2]
  16: argument_expression_list ::= assignment_expression.
  17: argument_expression_list ::= argument_expression_list COMMA assignment_expression.
  18: unary_expression ::= postfix_expression.
  19: unary_expression ::= INC_OP unary_expression. [INC_OP precedence=2]
  20: unary_expression ::= DEC_OP unary_expression. [DEC_OP precedence=2]
  21: unary_expression ::= unary_operator cast_expression.
  22: unary_expression ::= SIZEOF unary_expression. [SIZEOF precedence=1]
  23: unary_expression ::= SIZEOF LPAREN type_name RPAREN. [SIZEOF precedence=1]
  24: unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT.
  25: cast_expression ::= unary_expression.
  26: cast_expression ::= LPAREN type_name RPAREN cast_expression.
  27: multiplicative_expression ::= cast_expression.
  28: multiplicative_expression ::= multiplicative_expression STAR cast_expression.
  29: multiplicative_expression ::= multiplicative_expression DIV cast_expression.
  30: multiplicative_expression ::= multiplicative_expression MOD cast_expression.
  31: additive_expression ::= multiplicative_expression.
  32: additive_expression ::= additive_expression PLUS multiplicative_expression.
  33: additive_expression ::= additive_expression MINUS multiplicative_expression.
  34: shift_expression ::= additive_expression.
  35: shift_expression ::= shift_expression LEFT_OP additive_expression. [LEFT_OP precedence=2]
  36: shift_expression ::= shift_expression RIGHT_OP additive_expression. [RIGHT_OP precedence=2]
  37: relational_expression ::= shift_expression.
  38: relational_expression ::= relational_expression LT shift_expression.
  39: relational_expression ::= relational_expression GT shift_expression.
  40: relational_expression ::= relational_expression LE_OP shift_expression. [LE_OP precedence=2]
  41: relational_expression ::= relational_expression GE_OP shift_expression. [GE_OP precedence=2]
  42: equality_expression ::= relational_expression.
  43: equality_expression ::= equality_expression EQ_OP relational_expression. [EQ_OP precedence=2]
  44: equality_expression ::= equality_expression NE_OP relational_expression. [NE_OP precedence=2]
  45: and_expression ::= equality_expression.
  46: and_expression ::= and_expression REF equality_expression.
  47: exclusive_or_expression ::= and_expression.
  48: exclusive_or_expression ::= exclusive_or_expression XOR and_expression.
  49: inclusive_or_expression ::= exclusive_or_expression.
  50: inclusive_or_expression ::= inclusive_or_expression PIPE exclusive_or_expression.
  51: logical_and_expression ::= inclusive_or_expression.
  52: logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression. [AND_OP precedence=3]
  53: logical_or_expression ::= logical_and_expression.
  54: logical_or_expression ::= logical_or_expression OR_OP logical_and_expression. [OR_OP precedence=3]
  55: conditional_expression ::= logical_or_expression.
  56: conditional_expression ::= logical_or_expression QUESTION expression COLON conditional_expression.
  57: assignment_expression ::= conditional_expression.
  58: assignment_expression ::= unary_expression assignment_operator assignment_expression.
  59: assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN|SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN. [STAR_ASSIGN precedence=3]
  60: expression ::= assignment_expression.
  61: expression ::= expression COMMA assignment_expression.
  62: constant_expression ::= conditional_expression.
  63: declaration ::= declaration_specifiers SEMCOL.
  64: declaration ::= declaration_specifiers init_declarator_list SEMCOL.
  65: declaration_specifiers ::= storage_class_specifier.
  66: declaration_specifiers ::= storage_class_specifier declaration_specifiers.
  67: declaration_specifiers ::= type_specifier.
  68: declaration_specifiers ::= type_specifier declaration_specifiers.
  69: declaration_specifiers ::= type_qualifier.
  70: declaration_specifiers ::= type_qualifier declaration_specifiers.
  71: init_declarator_list ::= init_declarator.
  72: init_declarator_list ::= init_declarator_list COMMA init_declarator.
  73: init_declarator ::= declarator.
  74: init_declarator ::= declarator ASSIGN initializer.
  75: storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER. [TYPEDEF precedence=6]
  76: type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME. [VOID precedence=7]
  77: type_specifier ::= struct_or_union_specifier.
  78: type_specifier ::= enum_specifier.
  79: struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET. [IDENTIFIER precedence=1]
  80: struct_or_union_specifier ::= struct_or_union LBRACKET struct_declaration_list RBRACKET.
  81: struct_or_union_specifier ::= struct_or_union IDENTIFIER. [IDENTIFIER precedence=1]
  82: struct_or_union ::= STRUCT|UNION. [STRUCT precedence=8]
  83: struct_declaration_list ::= struct_declaration.
  84: struct_declaration_list ::= struct_declaration_list struct_declaration.
  85: struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMCOL.
  86: specifier_qualifier_list ::= type_specifier specifier_qualifier_list.
  87: specifier_qualifier_list ::= type_specifier.
  88: specifier_qualifier_list ::= type_qualifier specifier_qualifier_list.
  89: specifier_qualifier_list ::= type_qualifier.
  90: struct_declarator_list ::= struct_declarator.
  91: struct_declarator_list ::= struct_declarator_list COMMA struct_declarator.
  92: struct_declarator ::= declarator.
  93: struct_declarator ::= COLON constant_expression.
  94: struct_declarator ::= declarator COLON constant_expression.
  95: enum_specifier ::= ENUM LBRACKET enumerator_list RBRACKET. [ENUM precedence=8]
  96: enum_specifier ::= ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET. [ENUM precedence=8]
  97: enum_specifier ::= ENUM IDENTIFIER. [ENUM precedence=8]
  98: enumerator_list ::= enumerator.
  99: enumerator_list ::= enumerator_list COMMA enumerator.
 100: enumerator ::= IDENTIFIER. [IDENTIFIER precedence=1]
 101: enumerator ::= IDENTIFIER ASSIGN constant_expression. [IDENTIFIER precedence=1]
 102: type_qualifier ::= CONST. [CONST precedence=7]
 103: declarator ::= pointer direct_declarator.
 104: declarator ::= direct_declarator.
 105: direct_declarator ::= IDENTIFIER. [IDENTIFIER precedence=1]
 106: direct_declarator ::= LPAREN declarator RPAREN.
 107: direct_declarator ::= direct_declarator LSQUAREB constant_expression RSQUAREB.
 108: direct_declarator ::= direct_declarator LSQUAREB RSQUAREB.
 109: direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN.
 110: direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN.
 111: direct_declarator ::= direct_declarator LPAREN RPAREN.
 112: pointer ::= STAR.
 113: pointer ::= STAR type_qualifier_list.
 114: pointer ::= STAR pointer.
 115: pointer ::= STAR type_qualifier_list pointer.
 116: type_qualifier_list ::= type_qualifier.
 117: type_qualifier_list ::= type_qualifier_list type_qualifier.
 118: parameter_type_list ::= parameter_list.
 119: parameter_type_list ::= parameter_list COMMA ELLIPSIS. [ELLIPSIS precedence=8]
 120: parameter_list ::= parameter_declaration.
 121: parameter_list ::= parameter_list COMMA parameter_declaration.
 122: parameter_declaration ::= declaration_specifiers declarator.
 123: parameter_declaration ::= declaration_specifiers abstract_declarator.
 124: parameter_declaration ::= declaration_specifiers.
 125: identifier_list ::= IDENTIFIER. [IDENTIFIER precedence=1]
 126: identifier_list ::= identifier_list COMMA IDENTIFIER. [IDENTIFIER precedence=1]
 127: type_name ::= specifier_qualifier_list.
 128: type_name ::= specifier_qualifier_list abstract_declarator.
 129: abstract_declarator ::= pointer.
 130: abstract_declarator ::= direct_abstract_declarator.
 131: abstract_declarator ::= pointer direct_abstract_declarator.
 132: direct_abstract_declarator ::= LPAREN abstract_declarator RPAREN.
 133: direct_abstract_declarator ::= LSQUAREB RSQUAREB.
 134: direct_abstract_declarator ::= LSQUAREB constant_expression RSQUAREB.
 135: direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB RSQUAREB.
 136: direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB constant_expression RSQUAREB.
 137: direct_abstract_declarator ::= LPAREN RPAREN.
 138: direct_abstract_declarator ::= LPAREN parameter_type_list RPAREN.
 139: direct_abstract_declarator ::= direct_abstract_declarator LPAREN RPAREN.
 140: direct_abstract_declarator ::= direct_abstract_declarator LPAREN parameter_type_list RPAREN.
 141: initializer ::= assignment_expression.
 142: initializer ::= LBRACKET initializer_list RBRACKET.
 143: initializer ::= LBRACKET initializer_list COMMA RBRACKET.
 144: initializer_list ::= initializer.
 145: initializer_list ::= initializer_list COMMA initializer.
 146: statement ::= labeled_statement.
 147: statement ::= compound_statement.
 148: statement ::= expression_statement.
 149: statement ::= selection_statement.
 150: statement ::= iteration_statement.
 151: statement ::= jump_statement.
 152: labeled_statement ::= IDENTIFIER COLON statement. [IDENTIFIER precedence=1]
 153: labeled_statement ::= CASE constant_expression COLON statement. [CASE precedence=9]
 154: labeled_statement ::= DEFAULT COLON statement. [DEFAULT precedence=9]
 155: compound_statement ::= LBRACKET RBRACKET.
 156: compound_statement ::= LBRACKET statement_list RBRACKET.
 157: compound_statement ::= LBRACKET declaration_list RBRACKET.
 158: compound_statement ::= LBRACKET declaration_list statement_list RBRACKET.
 159: declaration_list ::= declaration.
 160: declaration_list ::= declaration_list declaration.
 161: statement_list ::= statement.
 162: statement_list ::= statement_list statement.
 163: expression_statement ::= SEMCOL.
 164: expression_statement ::= expression SEMCOL.
 165: selection_statement ::= IF LPAREN expression RPAREN statement. [IF precedence=9]
 166: selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement. [IF precedence=9]
 167: selection_statement ::= SWITCH LPAREN expression RPAREN statement. [SWITCH precedence=9]
 168: iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement. [FOR precedence=9]
 169: iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement. [FOR precedence=9]
 170: jump_statement ::= CONTINUE SEMCOL. [CONTINUE precedence=9]
 171: jump_statement ::= BREAK SEMCOL. [BREAK precedence=9]
 172: jump_statement ::= BREAK expression SEMCOL. [BREAK precedence=9]
 173: jump_statement ::= RETURN SEMCOL. [RETURN precedence=9]
 174: jump_statement ::= RETURN expression SEMCOL. [RETURN precedence=9]
 175: translation_unit ::= external_declaration.
 176: translation_unit ::= translation_unit external_declaration.
 177: external_declaration ::= function_definition.
 178: external_declaration ::= declaration.
 179: function_definition ::= declaration_specifiers declarator declaration_list compound_statement.
 180: function_definition ::= declaration_specifiers declarator compound_statement.
 181: function_definition ::= declarator declaration_list compound_statement.
 182: function_definition ::= declarator compound_statement.
