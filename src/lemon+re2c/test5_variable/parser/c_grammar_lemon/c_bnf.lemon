// C grammar in Lemon
// https://www.lysator.liu.se/c/ANSI-C-grammar-y.html
// https://www.lysator.liu.se/c/ANSI-C-grammar-l.html
// https://github.com/antlr/grammars-v4/blob/master/c/C.g4
//
////////////////////////////////////////////////////////////////////////

%include
{
    #include <stdio.h>   // FILE, output on screen
    #include <assert.h>  // 
    #include <stdlib.h>  // malloc, free + os access: open file, read/write file, delete file etc...
    #include <stddef.h>  // size_t
    #include <string.h>  // strlen, strcmp
    #include <stdbool.h> // bool
    #include <math.h>
    
    void * theParser;
    
    void ParseTrace(FILE *TraceFILE, char *str);
    void * ParseAlloc(
        void * (*allocProc)(size_t)             // Function used to allocate memory
    );
    void ParseFree(
        void* parser,                          // The parser to be deleted
        void(*freeProc)(void*)                 // Function used to reclaim memory
    );
    void Parse(
        void * pParser,                        // The parser
        const int pTokentype,                  // The major token code number
        const double pTokenvalue              // Value associated with a token %token_type { double }
    );

}//END %include

%token_prefix TK_ // All token codes are integers with #defines that begin with "TK_"
%start_symbol translation_unit

%left IDENTIFIER CONSTANT STRING_LITERAL SIZEOF.
%left PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP.
%left AND_OP OR_OP STAR_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN.
%left SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN.
%left XOR_ASSIGN OR_ASSIGN TYPE_NAME.
%left TYPEDEF EXTERN STATIC AUTO REGISTER.
%left CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID.
%left STRUCT UNION ENUM ELLIPSIS.
%left CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN.
 
primary_expression ::= IDENTIFIER.
primary_expression ::= CONSTANT.
primary_expression ::= STRING_LITERAL.
primary_expression ::= LPAREN expression RPAREN.


postfix_expression ::= primary_expression.
postfix_expression ::= postfix_expression LSQUAREB expression RSQUAREB.
postfix_expression ::= postfix_expression LPAREN RPAREN.
postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN.
postfix_expression ::= postfix_expression DOT IDENTIFIER.
postfix_expression ::= postfix_expression PTR_OP IDENTIFIER.
postfix_expression ::= postfix_expression INC_OP.
postfix_expression ::= postfix_expression DEC_OP.


argument_expression_list ::= assignment_expression.
argument_expression_list ::= argument_expression_list COMMA assignment_expression.


unary_expression ::= postfix_expression.
unary_expression ::= INC_OP unary_expression.
unary_expression ::= DEC_OP unary_expression.
unary_expression ::= unary_operator cast_expression.
unary_expression ::= SIZEOF unary_expression.
unary_expression ::= SIZEOF LPAREN type_name RPAREN.


unary_operator ::= REF|STAR|PLUS|MINUS|TILDE|NOT.

cast_expression ::= unary_expression.
cast_expression ::= LPAREN type_name RPAREN cast_expression.


multiplicative_expression ::= cast_expression.
multiplicative_expression ::= multiplicative_expression STAR cast_expression.
multiplicative_expression ::= multiplicative_expression DIV cast_expression.
multiplicative_expression ::= multiplicative_expression MOD cast_expression.


additive_expression ::= multiplicative_expression.
additive_expression ::= additive_expression PLUS multiplicative_expression.
additive_expression ::= additive_expression MINUS multiplicative_expression.


shift_expression ::= additive_expression.
shift_expression ::= shift_expression LEFT_OP additive_expression.
shift_expression ::= shift_expression RIGHT_OP additive_expression.


relational_expression ::= shift_expression.
relational_expression ::= relational_expression LT shift_expression.
relational_expression ::= relational_expression GT shift_expression.
relational_expression ::= relational_expression LE_OP shift_expression.
relational_expression ::= relational_expression GE_OP shift_expression.


equality_expression ::= relational_expression.
equality_expression ::= equality_expression EQ_OP relational_expression.
equality_expression ::= equality_expression NE_OP relational_expression.


and_expression ::= equality_expression.
and_expression ::= and_expression REF equality_expression.


exclusive_or_expression ::= and_expression.
exclusive_or_expression ::= exclusive_or_expression XOR and_expression.


inclusive_or_expression ::= exclusive_or_expression.
inclusive_or_expression ::= inclusive_or_expression PIPE exclusive_or_expression.


logical_and_expression ::= inclusive_or_expression.
logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression.


logical_or_expression ::= logical_and_expression.
logical_or_expression ::= logical_or_expression OR_OP logical_and_expression.


conditional_expression ::= logical_or_expression.
conditional_expression ::= logical_or_expression QUESTION expression COLON conditional_expression.


assignment_expression ::= conditional_expression.
assignment_expression ::= unary_expression assignment_operator assignment_expression.


assignment_operator ::= ASSIGN|STAR_ASSIGN|DIV_ASSIGN|MOD_ASSIGN|ADD_ASSIGN
                    |SUB_ASSIGN|LEFT_ASSIGN|RIGHT_ASSIGN|AND_ASSIGN|XOR_ASSIGN|OR_ASSIGN.


expression ::= assignment_expression.
expression ::= expression COMMA assignment_expression.


constant_expression ::= conditional_expression.


declaration ::= declaration_specifiers SEMCOL.
declaration ::= declaration_specifiers init_declarator_list SEMCOL.


declaration_specifiers ::= storage_class_specifier.
declaration_specifiers ::= storage_class_specifier declaration_specifiers.
declaration_specifiers ::= type_specifier.
declaration_specifiers ::= type_specifier declaration_specifiers.
declaration_specifiers ::= type_qualifier.
declaration_specifiers ::= type_qualifier declaration_specifiers.


init_declarator_list ::= init_declarator.
init_declarator_list ::= init_declarator_list COMMA init_declarator.


init_declarator ::= declarator.
init_declarator ::= declarator ASSIGN initializer.


storage_class_specifier ::= TYPEDEF|EXTERN|STATIC|AUTO|REGISTER.


type_specifier ::= VOID|CHAR|SHORT|INT|LONG|FLOAT|DOUBLE|SIGNED|UNSIGNED|TYPE_NAME.
type_specifier ::= struct_or_union_specifier.
type_specifier ::= enum_specifier.


struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACKET struct_declaration_list RBRACKET.
struct_or_union_specifier ::= struct_or_union LBRACKET struct_declaration_list RBRACKET.
struct_or_union_specifier ::= struct_or_union IDENTIFIER.


struct_or_union::= STRUCT|UNION.


struct_declaration_list ::= struct_declaration.
struct_declaration_list ::= struct_declaration_list struct_declaration.


struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMCOL.


specifier_qualifier_list ::= type_specifier specifier_qualifier_list.
specifier_qualifier_list ::= type_specifier.
specifier_qualifier_list ::= type_qualifier specifier_qualifier_list.
specifier_qualifier_list ::= type_qualifier.


struct_declarator_list ::= struct_declarator.
struct_declarator_list ::= struct_declarator_list COMMA struct_declarator.


struct_declarator ::= declarator.
struct_declarator ::= COLON constant_expression.
struct_declarator ::= declarator COLON constant_expression.


enum_specifier ::= ENUM LBRACKET enumerator_list RBRACKET.
enum_specifier ::= ENUM IDENTIFIER LBRACKET enumerator_list RBRACKET.
enum_specifier ::= ENUM IDENTIFIER.


enumerator_list ::= enumerator.
enumerator_list ::= enumerator_list COMMA enumerator.


enumerator ::= IDENTIFIER.
enumerator ::= IDENTIFIER ASSIGN constant_expression.


type_qualifier ::= CONST.


declarator ::= pointer direct_declarator.
declarator ::= direct_declarator.


direct_declarator ::= IDENTIFIER.
direct_declarator ::= LPAREN declarator RPAREN.
direct_declarator ::= direct_declarator LSQUAREB constant_expression RSQUAREB.
direct_declarator ::= direct_declarator LSQUAREB RSQUAREB.
direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN.
direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN.
direct_declarator ::= direct_declarator LPAREN RPAREN.


pointer ::= STAR.
pointer ::= STAR type_qualifier_list.
pointer ::= STAR pointer.
pointer ::= STAR type_qualifier_list pointer.


type_qualifier_list ::= type_qualifier.
type_qualifier_list ::= type_qualifier_list type_qualifier.


parameter_type_list ::= parameter_list.
parameter_type_list ::= parameter_list COMMA ELLIPSIS.


parameter_list ::= parameter_declaration.
parameter_list ::= parameter_list COMMA parameter_declaration.


parameter_declaration ::= declaration_specifiers declarator.
parameter_declaration ::= declaration_specifiers abstract_declarator.
parameter_declaration ::= declaration_specifiers.


identifier_list ::= IDENTIFIER.
identifier_list ::= identifier_list COMMA IDENTIFIER.


type_name ::= specifier_qualifier_list.
type_name ::= specifier_qualifier_list abstract_declarator.


abstract_declarator ::= pointer.
abstract_declarator ::= direct_abstract_declarator.
abstract_declarator ::= pointer direct_abstract_declarator.


direct_abstract_declarator ::= LPAREN abstract_declarator RPAREN.
direct_abstract_declarator ::= LSQUAREB RSQUAREB.
direct_abstract_declarator ::= LSQUAREB constant_expression RSQUAREB.
direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB RSQUAREB.
direct_abstract_declarator ::= direct_abstract_declarator LSQUAREB constant_expression RSQUAREB.
direct_abstract_declarator ::= LPAREN RPAREN.
direct_abstract_declarator ::= LPAREN parameter_type_list RPAREN.
direct_abstract_declarator ::= direct_abstract_declarator LPAREN RPAREN.
direct_abstract_declarator ::= direct_abstract_declarator LPAREN parameter_type_list RPAREN.


initializer ::= assignment_expression.
initializer ::= LBRACKET initializer_list RBRACKET.
initializer ::= LBRACKET initializer_list COMMA RBRACKET.


initializer_list ::= initializer.
initializer_list ::= initializer_list COMMA initializer.


statement ::= labeled_statement.
statement ::= compound_statement.
statement ::= expression_statement.
statement ::= selection_statement.
statement ::= iteration_statement.
statement ::= jump_statement.


labeled_statement ::= IDENTIFIER COLON statement.
labeled_statement ::= CASE constant_expression COLON statement.
labeled_statement ::= DEFAULT COLON statement.


compound_statement ::= LBRACKET RBRACKET.
compound_statement ::= LBRACKET statement_list RBRACKET.
compound_statement ::= LBRACKET declaration_list RBRACKET.
compound_statement ::= LBRACKET declaration_list statement_list RBRACKET.


declaration_list ::= declaration.
declaration_list ::= declaration_list declaration.


statement_list ::= statement.
statement_list ::= statement_list statement.


expression_statement ::= SEMCOL.
expression_statement ::= expression SEMCOL.


selection_statement ::= IF LPAREN expression RPAREN statement.
selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement.
selection_statement ::= SWITCH LPAREN expression RPAREN statement.


iteration_statement ::= FOR LPAREN expression_statement expression_statement RPAREN statement.
iteration_statement ::= FOR LPAREN expression_statement expression_statement expression RPAREN statement.


jump_statement ::= CONTINUE SEMCOL.
jump_statement ::= BREAK SEMCOL.
jump_statement ::= BREAK expression SEMCOL.
jump_statement ::= RETURN SEMCOL.
jump_statement ::= RETURN expression SEMCOL.


translation_unit ::= external_declaration.
translation_unit ::= translation_unit external_declaration.


external_declaration ::= function_definition.
external_declaration ::= declaration.


function_definition ::= declaration_specifiers declarator declaration_list compound_statement.
function_definition ::= declaration_specifiers declarator compound_statement.
function_definition ::= declarator declaration_list compound_statement.
function_definition ::= declarator compound_statement.
