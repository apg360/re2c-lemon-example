State 0:
          program ::= * input
     (12) input ::= *
          input ::= * input lines

                       program accept
                         input shift        1      
                     {default} reduce       12     input ::=

State 1:
     (11) program ::= input *
          input ::= input * lines
          lines ::= * statements END_OF_LINE|END_OF_FILE
          statements ::= * statement
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * jump_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          jump_statement ::= * BREAK expression
          jump_statement ::= * BREAK
          jump_statement ::= * FALLTHROUGH
          jump_statement ::= * RETURN expression
          jump_statement ::= * RETURN
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                             $ reduce       11     program ::= input
                         BREAK shift        11     
                        RETURN shift        10     
                   FALLTHROUGH shift-reduce 27     jump_statement ::= FALLTHROUGH
                            IF shift        4      
                    IDENTIFIER shift        39     
                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                         lines shift-reduce 13     input ::= input lines
                    statements shift        27     
                     statement shift        27       /* because statement==statements */
                varDeclaration shift        27       /* because varDeclaration==statement */
                  if_statement shift        27       /* because if_statement==statement */
                jump_statement shift        27       /* because jump_statement==statement */
                    expression shift        27       /* because expression==statement */
                          expr shift        24     

State 2:
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * jump_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET * statement RBRACKET
          jump_statement ::= * BREAK expression
          jump_statement ::= * BREAK
          jump_statement ::= * FALLTHROUGH
          jump_statement ::= * RETURN expression
          jump_statement ::= * RETURN
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                         BREAK shift        11     
                        RETURN shift        10     
                   FALLTHROUGH shift-reduce 27     jump_statement ::= FALLTHROUGH
                            IF shift        4      
                    IDENTIFIER shift        39     
                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                     statement shift        28     
                varDeclaration shift        28       /* because varDeclaration==statement */
                  if_statement shift        28       /* because if_statement==statement */
                jump_statement shift        28       /* because jump_statement==statement */
                    expression shift        28       /* because expression==statement */
                          expr shift        24     

State 3:
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * jump_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET * statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET * statement RBRACKET LBRACKET statement RBRACKET
          jump_statement ::= * BREAK expression
          jump_statement ::= * BREAK
          jump_statement ::= * FALLTHROUGH
          jump_statement ::= * RETURN expression
          jump_statement ::= * RETURN
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                         BREAK shift        11     
                        RETURN shift        10     
                   FALLTHROUGH shift-reduce 27     jump_statement ::= FALLTHROUGH
                            IF shift        4      
                    IDENTIFIER shift        39     
                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                     statement shift        30     
                varDeclaration shift        30       /* because varDeclaration==statement */
                  if_statement shift        30       /* because if_statement==statement */
                jump_statement shift        30       /* because jump_statement==statement */
                    expression shift        30       /* because expression==statement */
                          expr shift        24     

State 4:
          if_statement ::= IF * bool_expression LBRACKET statement RBRACKET
          if_statement ::= IF * bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          bool_expression ::= * expression OR expression
          bool_expression ::= * bool_and_expression
          bool_and_expression ::= * expression AND expression
          bool_and_expression ::= * bool_unary_expression
          bool_unary_expression ::= * NOT expression
          bool_unary_expression ::= * bool_relop_expression
          bool_relop_expression ::= * expression relop expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           NOT shift        6      
                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift        13     
               bool_expression shift        31     
           bool_and_expression shift        31       /* because bool_and_expression==bool_expression */
         bool_unary_expression shift        31       /* because bool_unary_expression==bool_and_expression */
         bool_relop_expression shift        31       /* because bool_relop_expression==bool_unary_expression */
                          expr shift        24     

State 5:
          varDeclaration ::= IDENTIFIER ASSIGN * VARTYPE ASSIGN expression
          varDeclaration ::= IDENTIFIER ASSIGN * VARTYPE
          varDeclaration ::= IDENTIFIER ASSIGN * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                       VARTYPE shift        38     
                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 22     varDeclaration ::= IDENTIFIER ASSIGN expression
                          expr shift        24     

State 6:
          bool_unary_expression ::= NOT * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 34     bool_unary_expression ::= NOT expression
                          expr shift        24     

State 7:
          bool_relop_expression ::= expression relop * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 36     bool_relop_expression ::= expression relop expression
                          expr shift        24     

State 8:
          bool_and_expression ::= expression AND * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 32     bool_and_expression ::= expression AND expression
                          expr shift        24     

State 9:
          bool_expression ::= expression OR * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 30     bool_expression ::= expression OR expression
                          expr shift        24     

State 10:
          jump_statement ::= RETURN * expression
     (29) jump_statement ::= RETURN *
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 28     jump_statement ::= RETURN expression
                          expr shift        24     
                     {default} reduce       29     jump_statement ::= RETURN

State 11:
          jump_statement ::= BREAK * expression
     (26) jump_statement ::= BREAK *
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 25     jump_statement ::= BREAK expression
                          expr shift        24     
                     {default} reduce       26     jump_statement ::= BREAK

State 12:
          varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                    expression shift-reduce 20     varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN expression
                          expr shift        24     

State 13:
          bool_expression ::= expression * OR expression
          bool_and_expression ::= expression * AND expression
          bool_relop_expression ::= expression * relop expression
          relop ::= * LE|LT|GT|GE|EQ|NE

                           AND shift        8      
                            OR shift        9      
                            EQ shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                            NE shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                            GT shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                            GE shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                            LT shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                            LE shift-reduce 37     relop ::= LE|LT|GT|GE|EQ|NE
                         relop shift        7      

State 14:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= SUB * expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        32     

State 15:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= ADD * expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        33     

State 16:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= LPAREN * expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        23     

State 17:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= expr EXP * expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        34     

State 18:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= expr MOD * expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        35     

State 19:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= expr DIV * expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        36     

State 20:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= expr MUL * expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        37     

State 21:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= expr SUB * expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        25     

State 22:
          expr ::= * expr ADD expr
          expr ::= expr ADD * expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        15     
                           SUB shift        14     
                        LPAREN shift        16     
                   INT_LITERAL shift-reduce 10     expr ::= INT_LITERAL
                          expr shift        26     

State 23:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
          expr ::= LPAREN expr * RPAREN

                           ADD shift        22     
                           SUB shift        21     
                           DIV shift        19     
                           MUL shift        20     
                           MOD shift        18     
                           EXP shift        17     
                        RPAREN shift-reduce 7      expr ::= LPAREN expr RPAREN

State 24:
      (0) expression ::= expr *
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           ADD shift        22     
                           SUB shift        21     
                           DIV shift        19     
                           MUL shift        20     
                           MOD shift        18     
                           EXP shift        17     
                     {default} reduce       0      expression ::= expr

State 25:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
      (2) expr ::= expr SUB expr *
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           DIV shift        19     
                           MUL shift        20     
                           MOD shift        18     
                           EXP shift        17     
                     {default} reduce       2      expr ::= expr SUB expr

State 26:
          expr ::= expr * ADD expr
      (1) expr ::= expr ADD expr *
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           DIV shift        19     
                           MUL shift        20     
                           MOD shift        18     
                           EXP shift        17     
                     {default} reduce       1      expr ::= expr ADD expr

State 27:
          lines ::= statements * END_OF_LINE|END_OF_FILE

                   END_OF_LINE shift-reduce 14     lines ::= statements END_OF_LINE|END_OF_FILE
                   END_OF_FILE shift-reduce 14     lines ::= statements END_OF_LINE|END_OF_FILE

State 28:
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement * RBRACKET

                      RBRACKET shift-reduce 24     if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET

State 29:
     (23) if_statement ::= IF bool_expression LBRACKET statement RBRACKET *
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET * LBRACKET statement RBRACKET

                      LBRACKET shift        2      
                     {default} reduce       23     if_statement ::= IF bool_expression LBRACKET statement RBRACKET

State 30:
          if_statement ::= IF bool_expression LBRACKET statement * RBRACKET
          if_statement ::= IF bool_expression LBRACKET statement * RBRACKET LBRACKET statement RBRACKET

                      RBRACKET shift        29     

State 31:
          if_statement ::= IF bool_expression * LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression * LBRACKET statement RBRACKET LBRACKET statement RBRACKET

                      LBRACKET shift        3      

State 32:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
      (9) expr ::= SUB expr *

                           EXP shift        17     
                     {default} reduce       9      expr ::= SUB expr

State 33:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
      (8) expr ::= ADD expr *

                           EXP shift        17     
                     {default} reduce       8      expr ::= ADD expr

State 34:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
      (6) expr ::= expr EXP expr *

                           EXP shift        17     
                     {default} reduce       6      expr ::= expr EXP expr

State 35:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
      (5) expr ::= expr MOD expr *
          expr ::= expr * EXP expr

                           EXP shift        17     
                     {default} reduce       5      expr ::= expr MOD expr

State 36:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
      (4) expr ::= expr DIV expr *
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           EXP shift        17     
                     {default} reduce       4      expr ::= expr DIV expr

State 37:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
      (3) expr ::= expr MUL expr *
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           EXP shift        17     
                     {default} reduce       3      expr ::= expr MUL expr

State 38:
          varDeclaration ::= IDENTIFIER ASSIGN VARTYPE * ASSIGN expression
     (21) varDeclaration ::= IDENTIFIER ASSIGN VARTYPE *

                        ASSIGN shift        12     
                     {default} reduce       21     varDeclaration ::= IDENTIFIER ASSIGN VARTYPE

State 39:
          varDeclaration ::= IDENTIFIER * ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= IDENTIFIER * ASSIGN VARTYPE
          varDeclaration ::= IDENTIFIER * ASSIGN expression

                        ASSIGN shift        5      

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: DEFAULT (precedence=1)
    2: BREAK (precedence=1)
    3: RETURN (precedence=1)
    4: FALLTHROUGH (precedence=1)
    5: SEMCOL (precedence=1)
    6: FOR (precedence=1)
    7: SWITCH (precedence=1)
    8: IF (precedence=1)
    9: VARTYPE (precedence=1)
   10: IDENTIFIER (precedence=1)
   11: ASSIGN (precedence=1)
   12: NOT (precedence=1)
   13: AND (precedence=1)
   14: OR (precedence=1)
   15: EQ (precedence=1)
   16: NE (precedence=1)
   17: GT (precedence=1)
   18: GE (precedence=1)
   19: LT (precedence=1)
   20: LE (precedence=1)
   21: ADD (precedence=2)
   22: SUB (precedence=2)
   23: DIV (precedence=3)
   24: MUL (precedence=3)
   25: MOD (precedence=3)
   26: POS (precedence=4)
   27: NEG (precedence=4)
   28: EXP (precedence=5)
   29: LBRACKET (precedence=6)
   30: RBRACKET (precedence=6)
   31: LPAREN (precedence=6)
   32: RPAREN (precedence=6)
   33: END_OF_LINE
   34: END_OF_FILE
   35: INT_LITERAL
   36: program: <lambda> BREAK RETURN FALLTHROUGH IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   37: input: <lambda> BREAK RETURN FALLTHROUGH IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   38: lines: BREAK RETURN FALLTHROUGH IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   39: statements: BREAK RETURN FALLTHROUGH IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   40: statement: BREAK RETURN FALLTHROUGH IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   41: varDeclaration: IDENTIFIER
   42: if_statement: IF
   43: jump_statement: BREAK RETURN FALLTHROUGH
   44: expression: ADD SUB LPAREN INT_LITERAL
   45: bool_expression: NOT ADD SUB LPAREN INT_LITERAL
   46: bool_and_expression: NOT ADD SUB LPAREN INT_LITERAL
   47: bool_unary_expression: NOT ADD SUB LPAREN INT_LITERAL
   48: bool_relop_expression: ADD SUB LPAREN INT_LITERAL
   49: relop: EQ NE GT GE LT LE
   50: expr: ADD SUB LPAREN INT_LITERAL
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ DEFAULT BREAK RETURN FALLTHROUGH SEMCOL FOR SWITCH IF VARTYPE IDENTIFIER
ASSIGN NOT AND OR EQ NE GT GE LT LE ADD SUB DIV MUL MOD POS NEG EXP LBRACKET
RBRACKET LPAREN RPAREN END_OF_LINE END_OF_FILE program input lines
statements statement varDeclaration if_statement jump_statement expression
bool_expression bool_and_expression bool_unary_expression
bool_relop_expression relop
----------------------------------------------------
Rules:
   0: expression ::= expr.
   1: expr ::= expr ADD expr. [ADD precedence=2]
   2: expr ::= expr SUB expr. [SUB precedence=2]
   3: expr ::= expr MUL expr. [MUL precedence=3]
   4: expr ::= expr DIV expr. [DIV precedence=3]
   5: expr ::= expr MOD expr. [MOD precedence=3]
   6: expr ::= expr EXP expr. [EXP precedence=5]
   7: expr ::= LPAREN expr RPAREN. [LPAREN precedence=6]
   8: expr ::= ADD expr. [POS precedence=4]
   9: expr ::= SUB expr. [NEG precedence=4]
  10: expr ::= INT_LITERAL.
  11: program ::= input.
  12: input ::=.
  13: input ::= input lines.
  14: lines ::= statements END_OF_LINE|END_OF_FILE.
  15: statements ::= statement.
  16: statement ::= varDeclaration.
  17: statement ::= if_statement.
  18: statement ::= jump_statement.
  19: statement ::= expression.
  20: varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN expression. [IDENTIFIER precedence=1]
  21: varDeclaration ::= IDENTIFIER ASSIGN VARTYPE. [IDENTIFIER precedence=1]
  22: varDeclaration ::= IDENTIFIER ASSIGN expression. [IDENTIFIER precedence=1]
  23: if_statement ::= IF bool_expression LBRACKET statement RBRACKET. [IF precedence=1]
  24: if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET. [IF precedence=1]
  25: jump_statement ::= BREAK expression. [BREAK precedence=1]
  26: jump_statement ::= BREAK. [BREAK precedence=1]
  27: jump_statement ::= FALLTHROUGH. [FALLTHROUGH precedence=1]
  28: jump_statement ::= RETURN expression. [RETURN precedence=1]
  29: jump_statement ::= RETURN. [RETURN precedence=1]
  30: bool_expression ::= expression OR expression. [OR precedence=1]
  31: bool_expression ::= bool_and_expression.
  32: bool_and_expression ::= expression AND expression. [AND precedence=1]
  33: bool_and_expression ::= bool_unary_expression.
  34: bool_unary_expression ::= NOT expression. [NOT precedence=1]
  35: bool_unary_expression ::= bool_relop_expression.
  36: bool_relop_expression ::= expression relop expression.
  37: relop ::= LE|LT|GT|GE|EQ|NE. [LE precedence=1]
