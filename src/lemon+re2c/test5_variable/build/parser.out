State 0:
          program ::= * input
     (13) input ::= *
          input ::= * input lines

                       program accept
                         input shift        1      
                     {default} reduce       13     input ::=

State 1:
     (12) program ::= input *
          input ::= input * lines
          lines ::= * statements END_OF_LINE|END_OF_FILE
          statements ::= * statement
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                             $ reduce       12     program ::= input
                            IF shift        4      
                    IDENTIFIER shift        34     
                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                         lines shift-reduce 14     input ::= input lines
                    statements shift        22     
                     statement shift        22       /* because statement==statements */
                varDeclaration shift        22       /* because varDeclaration==statement */
                  if_statement shift        22       /* because if_statement==statement */
                    expression shift        22       /* because expression==statement */
                          expr shift        19     

State 2:
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET * statement RBRACKET
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                            IF shift        4      
                    IDENTIFIER shift        34     
                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                     statement shift        23     
                varDeclaration shift        23       /* because varDeclaration==statement */
                  if_statement shift        23       /* because if_statement==statement */
                    expression shift        23       /* because expression==statement */
                          expr shift        19     

State 3:
          statement ::= * varDeclaration
          statement ::= * if_statement
          statement ::= * expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= * IDENTIFIER ASSIGN VARTYPE
          varDeclaration ::= * IDENTIFIER ASSIGN expression
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET * statement RBRACKET
          if_statement ::= * IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression LBRACKET * statement RBRACKET LBRACKET statement RBRACKET
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                            IF shift        4      
                    IDENTIFIER shift        34     
                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                     statement shift        25     
                varDeclaration shift        25       /* because varDeclaration==statement */
                  if_statement shift        25       /* because if_statement==statement */
                    expression shift        25       /* because expression==statement */
                          expr shift        19     

State 4:
          if_statement ::= IF * bool_expression LBRACKET statement RBRACKET
          if_statement ::= IF * bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET
          bool_expression ::= * expression AND|OR|EQ|NE|GT|GE|LT|LE expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                    expression shift        17     
               bool_expression shift        26     
                          expr shift        19     

State 5:
          varDeclaration ::= IDENTIFIER ASSIGN * VARTYPE ASSIGN expression
          varDeclaration ::= IDENTIFIER ASSIGN * VARTYPE
          varDeclaration ::= IDENTIFIER ASSIGN * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                       VARTYPE shift        33     
                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                    expression shift-reduce 22     varDeclaration ::= IDENTIFIER ASSIGN expression
                          expr shift        19     

State 6:
          bool_expression ::= expression AND|OR|EQ|NE|GT|GE|LT|LE * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                    expression shift-reduce 0      bool_expression ::= expression AND|OR|EQ|NE|GT|GE|LT|LE expression
                          expr shift        19     

State 7:
          varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN * expression
          expression ::= * expr
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                    expression shift-reduce 20     varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN expression
                          expr shift        19     

State 8:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= SUB * expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        27     

State 9:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= ADD * expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        28     

State 10:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= LPAREN * expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        18     

State 11:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= expr EXP * expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        29     

State 12:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= expr MOD * expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        30     

State 13:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= expr DIV * expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        31     

State 14:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= expr MUL * expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        32     

State 15:
          expr ::= * expr ADD expr
          expr ::= * expr SUB expr
          expr ::= expr SUB * expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        20     

State 16:
          expr ::= * expr ADD expr
          expr ::= expr ADD * expr
          expr ::= * expr SUB expr
          expr ::= * expr MUL expr
          expr ::= * expr DIV expr
          expr ::= * expr MOD expr
          expr ::= * expr EXP expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * ADD expr
          expr ::= * SUB expr
          expr ::= * INT_LITERAL

                           ADD shift        9      
                           SUB shift        8      
                        LPAREN shift        10     
                   INT_LITERAL shift-reduce 11     expr ::= INT_LITERAL
                          expr shift        21     

State 17:
          bool_expression ::= expression * AND|OR|EQ|NE|GT|GE|LT|LE expression

                           AND shift        6      
                            OR shift        6      
                            EQ shift        6      
                            NE shift        6      
                            GT shift        6      
                            GE shift        6      
                            LT shift        6      
                            LE shift        6      

State 18:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
          expr ::= LPAREN expr * RPAREN

                           ADD shift        16     
                           SUB shift        15     
                           DIV shift        13     
                           MUL shift        14     
                           MOD shift        12     
                           EXP shift        11     
                        RPAREN shift-reduce 8      expr ::= LPAREN expr RPAREN

State 19:
      (1) expression ::= expr *
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           ADD shift        16     
                           SUB shift        15     
                           DIV shift        13     
                           MUL shift        14     
                           MOD shift        12     
                           EXP shift        11     
                     {default} reduce       1      expression ::= expr

State 20:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
      (3) expr ::= expr SUB expr *
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           DIV shift        13     
                           MUL shift        14     
                           MOD shift        12     
                           EXP shift        11     
                     {default} reduce       3      expr ::= expr SUB expr

State 21:
          expr ::= expr * ADD expr
      (2) expr ::= expr ADD expr *
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           DIV shift        13     
                           MUL shift        14     
                           MOD shift        12     
                           EXP shift        11     
                     {default} reduce       2      expr ::= expr ADD expr

State 22:
          lines ::= statements * END_OF_LINE|END_OF_FILE

                   END_OF_LINE shift-reduce 15     lines ::= statements END_OF_LINE|END_OF_FILE
                   END_OF_FILE shift-reduce 15     lines ::= statements END_OF_LINE|END_OF_FILE

State 23:
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement * RBRACKET

                      RBRACKET shift-reduce 24     if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET

State 24:
     (23) if_statement ::= IF bool_expression LBRACKET statement RBRACKET *
          if_statement ::= IF bool_expression LBRACKET statement RBRACKET * LBRACKET statement RBRACKET

                      LBRACKET shift        2      
                     {default} reduce       23     if_statement ::= IF bool_expression LBRACKET statement RBRACKET

State 25:
          if_statement ::= IF bool_expression LBRACKET statement * RBRACKET
          if_statement ::= IF bool_expression LBRACKET statement * RBRACKET LBRACKET statement RBRACKET

                      RBRACKET shift        24     

State 26:
          if_statement ::= IF bool_expression * LBRACKET statement RBRACKET
          if_statement ::= IF bool_expression * LBRACKET statement RBRACKET LBRACKET statement RBRACKET

                      LBRACKET shift        3      

State 27:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
     (10) expr ::= SUB expr *

                           EXP shift        11     
                     {default} reduce       10     expr ::= SUB expr

State 28:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
      (9) expr ::= ADD expr *

                           EXP shift        11     
                     {default} reduce       9      expr ::= ADD expr

State 29:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr
      (7) expr ::= expr EXP expr *

                           EXP shift        11     
                     {default} reduce       7      expr ::= expr EXP expr

State 30:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
      (6) expr ::= expr MOD expr *
          expr ::= expr * EXP expr

                           EXP shift        11     
                     {default} reduce       6      expr ::= expr MOD expr

State 31:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
          expr ::= expr * DIV expr
      (5) expr ::= expr DIV expr *
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           EXP shift        11     
                     {default} reduce       5      expr ::= expr DIV expr

State 32:
          expr ::= expr * ADD expr
          expr ::= expr * SUB expr
          expr ::= expr * MUL expr
      (4) expr ::= expr MUL expr *
          expr ::= expr * DIV expr
          expr ::= expr * MOD expr
          expr ::= expr * EXP expr

                           EXP shift        11     
                     {default} reduce       4      expr ::= expr MUL expr

State 33:
          varDeclaration ::= IDENTIFIER ASSIGN VARTYPE * ASSIGN expression
     (21) varDeclaration ::= IDENTIFIER ASSIGN VARTYPE *

                        ASSIGN shift        7      
                     {default} reduce       21     varDeclaration ::= IDENTIFIER ASSIGN VARTYPE

State 34:
          varDeclaration ::= IDENTIFIER * ASSIGN VARTYPE ASSIGN expression
          varDeclaration ::= IDENTIFIER * ASSIGN VARTYPE
          varDeclaration ::= IDENTIFIER * ASSIGN expression

                        ASSIGN shift        5      

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: BREAK (precedence=1)
    2: RETURN (precedence=1)
    3: FALLTHROUGH (precedence=1)
    4: SEMCOL (precedence=1)
    5: FOR (precedence=1)
    6: SWITCH (precedence=1)
    7: IF (precedence=1)
    8: VARTYPE (precedence=1)
    9: IDENTIFIER (precedence=1)
   10: ASSIGN (precedence=1)
   11: AND (precedence=1)
   12: OR (precedence=1)
   13: EQ (precedence=1)
   14: NE (precedence=1)
   15: GT (precedence=1)
   16: GE (precedence=1)
   17: LT (precedence=1)
   18: LE (precedence=1)
   19: ADD (precedence=2)
   20: SUB (precedence=2)
   21: DIV (precedence=3)
   22: MUL (precedence=3)
   23: MOD (precedence=3)
   24: POS (precedence=4)
   25: NEG (precedence=4)
   26: EXP (precedence=5)
   27: LBRACKET (precedence=6)
   28: RBRACKET (precedence=6)
   29: LPAREN (precedence=6)
   30: RPAREN (precedence=6)
   31: END_OF_LINE
   32: END_OF_FILE
   33: INT_LITERAL
   34: program: <lambda> IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   35: input: <lambda> IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   36: lines: IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   37: statements: IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   38: statement: IF IDENTIFIER ADD SUB LPAREN INT_LITERAL
   39: varDeclaration: IDENTIFIER
   40: if_statement: IF
   41: expression: ADD SUB LPAREN INT_LITERAL
   42: bool_expression: ADD SUB LPAREN INT_LITERAL
   43: expr: ADD SUB LPAREN INT_LITERAL
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ BREAK RETURN FALLTHROUGH SEMCOL FOR SWITCH IF VARTYPE IDENTIFIER ASSIGN
AND OR EQ NE GT GE LT LE ADD SUB DIV MUL MOD POS NEG EXP LBRACKET RBRACKET
LPAREN RPAREN END_OF_LINE END_OF_FILE program input lines statements
statement varDeclaration if_statement expression bool_expression
----------------------------------------------------
Rules:
   0: bool_expression ::= expression AND|OR|EQ|NE|GT|GE|LT|LE expression. [AND precedence=1]
   1: expression ::= expr.
   2: expr ::= expr ADD expr. [ADD precedence=2]
   3: expr ::= expr SUB expr. [SUB precedence=2]
   4: expr ::= expr MUL expr. [MUL precedence=3]
   5: expr ::= expr DIV expr. [DIV precedence=3]
   6: expr ::= expr MOD expr. [MOD precedence=3]
   7: expr ::= expr EXP expr. [EXP precedence=5]
   8: expr ::= LPAREN expr RPAREN. [LPAREN precedence=6]
   9: expr ::= ADD expr. [POS precedence=4]
  10: expr ::= SUB expr. [NEG precedence=4]
  11: expr ::= INT_LITERAL.
  12: program ::= input.
  13: input ::=.
  14: input ::= input lines.
  15: lines ::= statements END_OF_LINE|END_OF_FILE.
  16: statements ::= statement.
  17: statement ::= varDeclaration.
  18: statement ::= if_statement.
  19: statement ::= expression.
  20: varDeclaration ::= IDENTIFIER ASSIGN VARTYPE ASSIGN expression. [IDENTIFIER precedence=1]
  21: varDeclaration ::= IDENTIFIER ASSIGN VARTYPE. [IDENTIFIER precedence=1]
  22: varDeclaration ::= IDENTIFIER ASSIGN expression. [IDENTIFIER precedence=1]
  23: if_statement ::= IF bool_expression LBRACKET statement RBRACKET. [IF precedence=1]
  24: if_statement ::= IF bool_expression LBRACKET statement RBRACKET LBRACKET statement RBRACKET. [IF precedence=1]
