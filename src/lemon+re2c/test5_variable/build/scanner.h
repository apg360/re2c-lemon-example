/* Generated by re2c 2.0.3 on Mon Jan 25 21:04:39 2021 */
// re2c $INPUT -o $OUTPUT -i
// french : https://fr.qaz.wiki/wiki/Re2c
// english : https://wikivisually.com/wiki/re2c
// https://www.systutorials.com/docs/linux/man/1-re2c
// https://re2c.org/manual/manual_c.html
//
// With Lemon it is the lexer/tokenizer that calls/initiate the parser
// re2c calls lemon
//----------------------------------------------------------------------

// the contents of 'definitions.re2c' are copy-pasted verbatim in place of the directive
//definitions.re2c START -----------------------
#include <common.h>  // A library with most common needs when programming
#include <token.h>   // 

bool scanner_DebugMode = false;
struct _scanner_state SCANNER_STATE;

//Parser START----------------------------------------------------------
    
    // A way to access the PARSER_STATE variable of inside parser.c
    // Make sure parser.c is added at compilation time.
    // variable name must be same as the one in parser.lemon
    extern const struct _parser_state PARSER_STATE;
    //printf("Result : %f\n",PARSER_STATE.result_value.number);
    
    // header for functions in parser.c  Make sure parser.c is added at compilation time.
    void PARSER_INIT(bool parser_DebugMode);
    void PARSER(const struct _Token * pToken);
    void PARSER_FREE();
    
//Parser END-----------------------------------------------------------

/*
R* : zero or more occurrences of the regular expression R.
R+ : one or more repetition of the regular expression R.
R? : zero or one R. That means, there maybe an R or not.
*/

//definitions.re2c END -----------------------

/*
    u8          the set of all unsigned  8-bit integers  (0 to 255)
    u16         the set of all unsigned 16-bit integers  (0 to 65535)
    u32         the set of all unsigned 32-bit integers  (0 to 4294967295)
    u64         the set of all unsigned 64-bit integers  (0 to 18446744073709551615)
    i8          the set of all signed  8-bit  integers (-128 to 127)
    i16         the set of all signed 16-bit  integers (-32768 to 32767)
    i32         the set of all signed 32-bit  integers (-2147483648 to 2147483647)
    i64         the set of all signed 64-bit  integers (-9223372036854775808 to 9223372036854775807)
    f16         the set of all IEEE-754-2008 16-bit floating point numbers (10-bit mantissa)
    f32         the set of all IEEE-754 32-bit floating-point numbers
    f64         the set of all IEEE-754 64-bit floating-point numbers
*/


void set_token(const int tokentype, const char* tokentypename)
{
    SCANNER_STATE.Token.type = tokentype;
    SCANNER_STATE.Token.type_name = tokentypename;
    SCANNER_STATE.column_position=(int)(SCANNER_STATE.begin - SCANNER_STATE.lexemes);
    
    // if numeric(TK_INT_LITERAL) then take input(string) and convert it to double
    if ( TK_INT_LITERAL == tokentype )
    {
      char tokenvalue_string[255];
      sprintf( tokenvalue_string, "%.*s", (int)(SCANNER_STATE.cursor - SCANNER_STATE.begin), SCANNER_STATE.begin );
      // converting string to double
      SCANNER_STATE.Token.value_is_a_number = char_to_double(tokenvalue_string);
    }
}

void SCANNER(const char *the_text)
{
    SCANNER_STATE.begin            = the_text;
    SCANNER_STATE.end              = the_text + strlen(the_text);
    SCANNER_STATE.cursor           = the_text;
    SCANNER_STATE.lexemes          = the_text;
    SCANNER_STATE.line_number      = 1;
    SCANNER_STATE.column_position  = 1;
    
    printf(" ** START Scanning : '%s'\n",the_text);
    if (scanner_DebugMode == true) printf("Number of characters %lu\n", strlen(the_text));
    
    
    
    // Infinite loop
    for (;;) 
    {
continue_scanning:
    // Reset variables
    SCANNER_STATE.begin = SCANNER_STATE.cursor;
    SCANNER_STATE.Token.type = 0;
    SCANNER_STATE.Token.value_is_a_number = 0;
    
    // If reached end of the text, last character (does not have "end");
    if ( SCANNER_STATE.cursor >= SCANNER_STATE.end )
    { 
      set_token( MACRO_VALUE_AND_NAME(TK_END_OF_FILE) );
      goto parser_now;
    };
    
    
{
	char yych;
	yych = *SCANNER_STATE.cursor;
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':	goto yy2;
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy7;
	case '%':	goto yy10;
	case '(':	goto yy12;
	case ')':	goto yy14;
	case '*':	goto yy16;
	case '+':	goto yy18;
	case '-':	goto yy20;
	case '/':	goto yy22;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy24;
	case ';':	goto yy27;
	case '<':	goto yy29;
	case '=':	goto yy31;
	case '>':	goto yy33;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'b':
	case 'c':
	case 'd':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	case '^':	goto yy38;
	case 'a':	goto yy40;
	case 'e':	goto yy41;
	case 'i':	goto yy42;
	case 'n':	goto yy43;
	case 'o':	goto yy44;
	case '{':	goto yy45;
	case '}':	goto yy47;
	default:	goto yy5;
	}
yy2:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 0x00:
	case '\n':
	case '\r':	goto yy2;
	default:	goto yy4;
	}
yy4:
	{ set_token( MACRO_VALUE_AND_NAME(TK_END_OF_LINE)     );
                        SCANNER_STATE.lexemes = SCANNER_STATE.cursor;    // remove already scanned text, remaining only unconsumed part
                        SCANNER_STATE.line_number++;                     // line counter increase +1
                        goto parser_now;
                      }
yy5:
	++SCANNER_STATE.cursor;
	{ printf("unexpected character: %c\n", *SCANNER_STATE.cursor+1); goto continue_scanning; }
yy7:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy7;
	default:	goto yy9;
	}
yy9:
	{ goto continue_scanning;}
yy10:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_MOD)         ); goto parser_now;}
yy12:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_LPAREN)      ); goto parser_now;}
yy14:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_RPAREN)      ); goto parser_now;}
yy16:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_MUL)         ); goto parser_now;}
yy18:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_ADD)         ); goto parser_now;}
yy20:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_SUB)         ); goto parser_now;}
yy22:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '*':	goto yy49;
	default:	goto yy23;
	}
yy23:
	{ set_token( MACRO_VALUE_AND_NAME(TK_DIV)         ); goto parser_now;}
yy24:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy24;
	default:	goto yy26;
	}
yy26:
	{ set_token( MACRO_VALUE_AND_NAME(TK_INT_LITERAL) ); goto parser_now;}
yy27:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_SEMCOL)      ); goto parser_now;}
yy29:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '=':	goto yy51;
	default:	goto yy30;
	}
yy30:
	{ set_token( MACRO_VALUE_AND_NAME(TK_LT)          ); goto parser_now;}
yy31:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '=':	goto yy53;
	default:	goto yy32;
	}
yy32:
	{ set_token( MACRO_VALUE_AND_NAME(TK_ASSIGN)      ); goto parser_now;}
yy33:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '=':	goto yy55;
	default:	goto yy34;
	}
yy34:
	{ set_token( MACRO_VALUE_AND_NAME(TK_GT)          ); goto parser_now;}
yy35:
	yych = *++SCANNER_STATE.cursor;
yy36:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy37;
	}
yy37:
	{ set_token( MACRO_VALUE_AND_NAME(TK_IDENTIFIER ) ); goto parser_now;}
yy38:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_EXP)         ); goto parser_now;}
yy40:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'n':	goto yy57;
	default:	goto yy36;
	}
yy41:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'l':	goto yy58;
	default:	goto yy36;
	}
yy42:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'f':	goto yy59;
	default:	goto yy36;
	}
yy43:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'o':	goto yy61;
	default:	goto yy36;
	}
yy44:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'r':	goto yy62;
	default:	goto yy36;
	}
yy45:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_LBRACKET)    ); goto parser_now;}
yy47:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_RBRACKET)    ); goto parser_now;}
yy49:
	++SCANNER_STATE.cursor;
	{ goto comment; }
yy51:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_LE)          ); goto parser_now;}
yy53:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_EQ)          ); goto parser_now;}
yy55:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_GE)          ); goto parser_now;}
yy57:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'd':	goto yy64;
	default:	goto yy36;
	}
yy58:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 's':	goto yy66;
	default:	goto yy36;
	}
yy59:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy60;
	}
yy60:
	{ set_token( MACRO_VALUE_AND_NAME(TK_IF)          ); goto parser_now;}
yy61:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 't':	goto yy67;
	default:	goto yy36;
	}
yy62:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy63;
	}
yy63:
	{ set_token( MACRO_VALUE_AND_NAME(TK_OR)          ); goto parser_now;}
yy64:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy65;
	}
yy65:
	{ set_token( MACRO_VALUE_AND_NAME(TK_AND)         ); goto parser_now;}
yy66:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'e':	goto yy68;
	default:	goto yy36;
	}
yy67:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '=':	goto yy70;
	default:	goto yy36;
	}
yy68:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	case 'i':	goto yy72;
	default:	goto yy69;
	}
yy69:
	{ set_token( MACRO_VALUE_AND_NAME(TK_ELSE)        ); goto parser_now;}
yy70:
	++SCANNER_STATE.cursor;
	{ set_token( MACRO_VALUE_AND_NAME(TK_NE)          ); goto parser_now;}
yy72:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case 'f':	goto yy73;
	default:	goto yy36;
	}
yy73:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy35;
	default:	goto yy74;
	}
yy74:
	{ set_token( MACRO_VALUE_AND_NAME(TK_ELSEIF)      ); goto parser_now;}
}

    
comment:
    
{
	char yych;
	yych = *SCANNER_STATE.cursor;
	switch (yych) {
	case '\n':	goto yy79;
	case '*':	goto yy81;
	default:	goto yy77;
	}
yy77:
	++SCANNER_STATE.cursor;
yy78:
	{ goto comment; }
yy79:
	++SCANNER_STATE.cursor;
	{ SCANNER_STATE.line_number++; goto comment; }
yy81:
	yych = *++SCANNER_STATE.cursor;
	switch (yych) {
	case '/':	goto yy82;
	default:	goto yy78;
	}
yy82:
	++SCANNER_STATE.cursor;
	{ goto continue_scanning; }
}


parser_now:
      if (scanner_DebugMode == true) { 
        printf("Line:%d / Col:%d ", SCANNER_STATE.line_number, SCANNER_STATE.column_position);
        printf("parser(%s, %.lf) \n", SCANNER_STATE.Token.type_name, SCANNER_STATE.Token.value_is_a_number); // Formating number of digits after dot %.15lf
      }
      
      PARSER( &SCANNER_STATE.Token );
      
      // end inifinite loop when reached end of text
      if( TK_END_OF_FILE == SCANNER_STATE.Token.type ) break;
    }//end for loop
    if (scanner_DebugMode == true) puts("\n ** THE END ** \n");
}

double eval(const char *the_text)
{
    double result;
    SCANNER(the_text);
    // Access PARSER_STATE and take the result value
    result = PARSER_STATE.result_value.value_is_a_number;
    
    return result;
}
