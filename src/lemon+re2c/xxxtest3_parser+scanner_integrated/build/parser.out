State 0:
          start ::= * in
      (1) in ::= *
          in ::= * in program NEWLINE

                         start accept
                            in shift  1
                     {default} reduce 1

State 1:
      (0) start ::= in *
          in ::= in * program NEWLINE
          program ::= * expr
          expr ::= * expr ADD expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * INT_LITERAL

                             $ reduce 0
                        LPAREN shift  2
                   INT_LITERAL shift  7
                       program shift  6
                          expr shift  5

State 2:
          expr ::= * expr ADD expr
          expr ::= * LPAREN expr RPAREN
          expr ::= LPAREN * expr RPAREN
          expr ::= * INT_LITERAL

                        LPAREN shift  2
                   INT_LITERAL shift  7
                          expr shift  4

State 3:
          expr ::= * expr ADD expr
          expr ::= expr ADD * expr
          expr ::= * LPAREN expr RPAREN
          expr ::= * INT_LITERAL

                        LPAREN shift  2
                   INT_LITERAL shift  7
                          expr shift  9

State 4:
          expr ::= expr * ADD expr
          expr ::= LPAREN expr * RPAREN

                           ADD shift  3
                        RPAREN shift  10

State 5:
      (3) program ::= expr *
          expr ::= expr * ADD expr

                           ADD shift  3
                     {default} reduce 3

State 6:
          in ::= in program * NEWLINE

                       NEWLINE shift  8

State 7:
      (6) expr ::= INT_LITERAL *

                     {default} reduce 6

State 8:
      (2) in ::= in program NEWLINE *

                     {default} reduce 2

State 9:
          expr ::= expr * ADD expr
      (4) expr ::= expr ADD expr *

                     {default} reduce 4

State 10:
      (5) expr ::= LPAREN expr RPAREN *

                     {default} reduce 5

----------------------------------------------------
Symbols:
    0: $:
    1: ADD
    2: SUB
    3: MUL
    4: DIV
    5: NEWLINE
    6: LPAREN
    7: RPAREN
    8: INT_LITERAL
    9: error:
   10: expression:
   11: start: LPAREN INT_LITERAL
   12: in: <lambda> LPAREN INT_LITERAL
   13: program: LPAREN INT_LITERAL
   14: expr: LPAREN INT_LITERAL
