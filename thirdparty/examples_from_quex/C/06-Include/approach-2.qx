header {
    extern void my_print(QUEX_TYPE_ANALYZER* qlex, const char* Str1, 
                         const char* Str2 /* = 0x0 */, const char* Str3 /* = 0x0*/);
}

body {
    size_t      letter_count;
    size_t      include_depth;  /* Track the include depth for fun */
}

constructor {
    self.letter_count  = 0;
    self.include_depth = 0;
}

memento {
    size_t   my_letter_count_store;
}

memento_pack {
    memento->my_letter_count_store = self.letter_count;
    self.letter_count = 0;
    self.include_depth += 1;
    /* Store the file handle, so that it can be closed later */
}

memento_unpack {
    self.letter_count = memento->my_letter_count_store;
    self.include_depth -= 1;
    /* Close the file handle */
}

token {
   INCLUDE;
   IDENTIFIER;
   BRACKET_OPEN;
   BRACKET_CLOSE;
   NUMBER;
}

start = MAIN;

mode BASE :
<inheritable: only> 
{
    on_end_of_stream {
        if( self.include_pop(&self) == false ) {
           self.error_code_clear(&self);
           self.send(&self, QUEX_TKN_TERMINATION);
        }
        else { 
           my_print(&self, "<< return from include", 0x0, 0x0);
        }
    }
}

mode MAIN : BASE
<skip: [ \t\r\n] > 
{
    "(" => QUEX_TKN_BRACKET_OPEN(LexemeNull);
    ")" => QUEX_TKN_BRACKET_CLOSE(LexemeNull);
    //
    "include"   { 
        self.letter_count += strlen((char*)Lexeme); 
        self.enter_mode(&self, FIND_INCLUDE_NAME);
        FLUSH;
    }
    //
    ([_a-zA-Z]|("/"|"."|"'"))+  { 
        self.send_string(&self, QUEX_TKN_IDENTIFIER, Lexeme); 
        self.letter_count += strlen((char*)Lexeme); 
    }
}

mode FIND_INCLUDE_NAME : BASE
<skip: [ \t\r\n] > 
{
    ([_a-zA-Z]|("/"|"."|"'"))+  { 
        self.letter_count += strlen((char*)Lexeme); 
        self.enter_mode(&self, MAIN);

        my_print(&self, ">> including: ", (const char*)Lexeme, 0x0);
        self.include_push_file_name(&self, (const char*)Lexeme, 0x0);
    }
}


