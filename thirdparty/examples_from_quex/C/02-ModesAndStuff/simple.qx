// -*- C++ -*-
start = PROGRAM;

header {
#include <stdlib.h>  /* gets:  atoi(const char*) */
}

define {
    P_IDENTIFIER          [a-zA-Z]+
    P_NUMBER              [0-9]+
    //
    P_STRING_DELIMITER                "\""
    P_BACKSLASHED_STRING_DELIMITER    "\\\""
    P_BACKSLASHED_BACKSLASH           "\\\\"
}

token {
    BRACKET_O;
    BRACKET_C;
    CURLY_BRACKET_O;
    CURLY_BRACKET_C;
    OP_ASSIGNMENT;
    IF;
    IDENTIFIER;
    STRUCT;
    SEMICOLON;
    NUMBER;
    STRING;
    QUOTE;
}

mode END_OF_FILE :
<inheritable: only>  
{    
    <<EOF>> => QUEX_TKN_TERMINATION(LexemeNull);
}


mode PROGRAM :
     END_OF_FILE
<entry: STRING_READER>
<exit:  STRING_READER>
{
    "{"         { self.send(&self, QUEX_TKN_CURLY_BRACKET_O); FLUSH; }
    "}"         => QUEX_TKN_CURLY_BRACKET_C;
    "="         => QUEX_TKN_OP_ASSIGNMENT;
    struct      => QUEX_TKN_STRUCT;
    if          => QUEX_TKN_IF;
    ";"         => QUEX_TKN_SEMICOLON;

    [a-z]+      { self.send_string(&self, QUEX_TKN_IDENTIFIER, Lexeme); }
    {P_NUMBER}  => QUEX_TKN_NUMBER(number=(size_t)atoi((const char*)(Lexeme)));

    [ \t\n]     { }

    {P_STRING_DELIMITER} {
        self.send(&self, QUEX_TKN_QUOTE);
        self.enter_mode(&self, STRING_READER);
        FLUSH;
    }
}

mode STRING_READER :
     END_OF_FILE
<entry: PROGRAM>
<exit:  PROGRAM>
{
    on_entry { self.accumulator.clear(&self.accumulator); }
    on_exit  { 
        self.accumulator.flush(&self.accumulator, QUEX_TKN_STRING); 
        self.send(&self, QUEX_TKN_QUOTE);
    }

    {P_BACKSLASHED_STRING_DELIMITER} { self.accumulator.add(&self.accumulator, Lexeme, LexemeEnd); }
    {P_BACKSLASHED_BACKSLASH}        { self.accumulator.add(&self.accumulator, Lexeme, LexemeEnd); }

    {P_STRING_DELIMITER}             { self.enter_mode(&self, PROGRAM); return; }

    <<FAIL>> {
        self.accumulator.add(&self.accumulator, Lexeme, LexemeEnd); 
        self.error_code_clear_this(&self, E_Error_OnFailure);
    }
}

