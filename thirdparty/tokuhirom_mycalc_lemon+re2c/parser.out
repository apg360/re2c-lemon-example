State 0:
          program ::= * expr
          expr ::= * primary_expression
          expr ::= * expr SUB primary_expression
          expr ::= * expr ADD primary_expression
          expr ::= * expr DIV primary_expression
          expr ::= * expr MUL primary_expression
          primary_expression ::= * INT

                           INT shift-reduce 6      primary_expression ::= INT
                       program accept
                          expr shift        5      
            primary_expression shift-reduce 1      expr ::= primary_expression

State 1:
          expr ::= expr MUL * primary_expression
          primary_expression ::= * INT

                           INT shift-reduce 6      primary_expression ::= INT
            primary_expression shift-reduce 5      expr ::= expr MUL primary_expression

State 2:
          expr ::= expr DIV * primary_expression
          primary_expression ::= * INT

                           INT shift-reduce 6      primary_expression ::= INT
            primary_expression shift-reduce 4      expr ::= expr DIV primary_expression

State 3:
          expr ::= expr ADD * primary_expression
          primary_expression ::= * INT

                           INT shift-reduce 6      primary_expression ::= INT
            primary_expression shift-reduce 3      expr ::= expr ADD primary_expression

State 4:
          expr ::= expr SUB * primary_expression
          primary_expression ::= * INT

                           INT shift-reduce 6      primary_expression ::= INT
            primary_expression shift-reduce 2      expr ::= expr SUB primary_expression

State 5:
      (0) program ::= expr *
          expr ::= expr * SUB primary_expression
          expr ::= expr * ADD primary_expression
          expr ::= expr * DIV primary_expression
          expr ::= expr * MUL primary_expression

                             $ reduce       0      program ::= expr
                           ADD shift        3      
                           SUB shift        4      
                           MUL shift        1      
                           DIV shift        2      

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: ADD (precedence=1)
    2: SUB (precedence=1)
    3: MUL (precedence=2)
    4: DIV (precedence=2)
    5: INT
    6: program: INT
    7: expr: INT
    8: primary_expression: INT
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ ADD SUB MUL DIV program
----------------------------------------------------
Rules:
   0: program ::= expr.
   1: expr ::= primary_expression.
   2: expr ::= expr SUB primary_expression. [SUB precedence=1]
   3: expr ::= expr ADD primary_expression. [ADD precedence=1]
   4: expr ::= expr DIV primary_expression. [DIV precedence=2]
   5: expr ::= expr MUL primary_expression. [MUL precedence=2]
   6: primary_expression ::= INT.
