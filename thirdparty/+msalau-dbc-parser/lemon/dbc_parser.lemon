%include {

#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include "dbc.h"
#include "dbc_parser_priv.h"

extern void *DbcParserAlloc(void *(*mallocProc)(size_t));
extern void DbcParser(void *yyp, int yymajor, char *yyminor, dbc_state_t *state);
extern void DbcParserFree(void *p, void (*freeProc)(void*));

#ifdef DBC_TRACE
extern void DbcParserTrace(FILE *TraceFILE, char *zTracePrompt);
#endif

#undef NDEBUG

#ifdef DBC_WARNINGS
G_GNUC_PRINTF(2, 3)
static void
dbc_warning(dbc_state_t *state, const gchar *format, ...)
{
    va_list ap;
    va_start(ap, format);
    gchar *str = g_strdup_vprintf(format, ap);
    va_end(ap);

    state->warnings = g_slist_append(state->warnings, str);
}
#endif

G_GNUC_PRINTF(2, 3)
static void
dbc_error(dbc_state_t *state, const gchar *format, ...)
{
    va_list ap;
    va_start(ap, format);
    gchar *str = g_strdup_vprintf(format, ap);
    va_end(ap);

    state->errors = g_slist_append(state->errors, str);
}

static gint
dbc_find_enum_value(GSList *enum_values, const gchar *value)
{
    gint    ret      = -1;
    gint    type_num = 0;
    GSList *elem;

    for (elem = enum_values; elem; elem = g_slist_next(elem))
    {
        if (g_strcmp0(elem->data, value) == 0)
        {
            ret = type_num;
            break;
        }
        type_num++;
    }

    return ret;
}

typedef enum {
    DBC_ATTRIBUTE_INT,
    DBC_ATTRIBUTE_HEX,
    DBC_ATTRIBUTE_FLOAT,
    DBC_ATTRIBUTE_STRING,
    DBC_ATTRIBUTE_ENUM,
} dbc_attribute_type_t;

typedef struct {
    dbc_attribute_type_t type;
    union {
        struct {
            gint32 min;
            gint32 max;
        } ival;
        struct {
            double min;
            double max;
        } fval;
        GSList *enum_values;
    };
} dbc_attribute_t;

}

%name DbcParser

%token_prefix TK_

%token_type { gchar * }
%token_destructor
{
    (void)state;
    (void)yypParser;

    g_free($$);
}

%extra_argument { dbc_state_t* state }

%syntax_error
{
    (void)yyminor;

    gboolean first = TRUE;
    GString *msg = g_string_new(NULL);

    g_string_append_printf(
        msg,
        "%d:%d: syntax error: unexpected %s, expecting ",
        state->lloc.first_line,
        state->lloc.first_column,
        yyTokenName[yymajor]);

    for (YYCODETYPE token = 0; token < YYNTOKEN; ++token)
    {
        const YYACTIONTYPE action = yy_find_shift_action(token, yypParser->yytos->stateno);

        if ((action == YY_ACCEPT_ACTION) ||
            (action <= YY_MAX_SHIFT) ||
            ((action >= YY_MIN_SHIFTREDUCE) && (action <= YY_MAX_SHIFTREDUCE)) ||
            ((action >= YY_MIN_REDUCE) && (action <= YY_MAX_REDUCE)))
        {
            if (!first)
                g_string_append(msg, ", ");
            g_string_append(msg, yyTokenName[token]);
            first = FALSE;
        }
    }

    gchar *str = g_string_free(msg, FALSE);
    dbc_error(state, "%s", str);
    g_free(str);
}

%parse_failure
{
    dbc_error(state, "Parse failure");
}

%stack_overflow
{
    dbc_error(state, "Stack overflow");
}

%nonassoc UNKNOWN .

%start_symbol spec

spec ::= version
         new_symbols
         bus_speed
         bus_units
         value_tables
         messages
         message_sender_lists
         environment_variables
         environment_variables_data
         signal_types
         comments
         attribute_definitions
         attribute_sgtype_definitions
         attribute_default_values
         attribute_values
         value_definitions
         category_definitions
         categories
         filter
         signal_type_referencies
         signal_groups
         signal_value_types
         signal_multiplexing_definitions
         .

version ::= .
version ::= VERSION TEXT(str) .
{
    state->dbc->version = str;
}

new_symbols ::= .
new_symbols ::= NS COLON new_symbol_names .

new_symbol_names ::= .
new_symbol_names ::= new_symbol_names new_symbol_name.

new_symbol_name ::= NAME .
new_symbol_name ::= NS_DESC .
new_symbol_name ::= CM .
new_symbol_name ::= VAL .
new_symbol_name ::= VAL_TABLE .
new_symbol_name ::= BA .
new_symbol_name ::= BA_REL .
new_symbol_name ::= BA_DEF .
new_symbol_name ::= BA_DEF_REL .
new_symbol_name ::= BA_DEF_DEF .
new_symbol_name ::= BA_DEF_DEF_REL .
new_symbol_name ::= BU_BO_REL .
new_symbol_name ::= BU_SG_REL .
new_symbol_name ::= BU_EV_REL .
new_symbol_name ::= SIG_VALTYPE .
new_symbol_name ::= SIG_GROUP .
new_symbol_name ::= SG_MUL_VAL .
new_symbol_name ::= BO_TX_BU .
new_symbol_name ::= EV .
new_symbol_name ::= EV_DATA .
new_symbol_name ::= ENVVAR_DATA .
new_symbol_name ::= SGTYPE .
new_symbol_name ::= SIG_TYPE_REF .
new_symbol_name ::= SGTYPE_VAL .
new_symbol_name ::= SIGTYPE_VALTYPE .
new_symbol_name ::= BA_DEF_SGTYPE .
new_symbol_name ::= BA_SGTYPE .
new_symbol_name ::= CAT_DEF .
new_symbol_name ::= CAT .
new_symbol_name ::= FILTER .
new_symbol_name ::= DUMMY_0 .
new_symbol_name ::= DUMMY_1 .
new_symbol_name ::= DUMMY_2 .
new_symbol_name ::= DUMMY_3 .
new_symbol_name ::= DUMMY_8000 .
new_symbol_name ::= DUMMY_8001 .
new_symbol_name ::= DUMMY_8002 .
new_symbol_name ::= DUMMY_8003 .

bus_speed ::= BS COLON .
bus_speed ::= BS COLON uint /*baudrate*/ .
bus_speed ::= BS COLON uint /*baudrate*/ COLON uint /*BTR1*/  COMMA uint /*BTR2*/ .

bus_units ::= BU COLON node_names(node_names) .
{
    state->dbc->nodes = node_names;
}

%type node_names { GSList * }
%destructor node_names { g_slist_free_full($$, (GDestroyNotify)dbc_free_node); }

node_names(r) ::= .                            { r = NULL; }
node_names(r) ::= node_names(l) node_name(v) . { r = g_slist_prepend(l, v); }

%type node_name { dbc_node_t * }
%destructor node_name { dbc_free_node($$); }

node_name(r) ::= name(v) .
{
    r = g_new0(dbc_node_t, 1);
    r->name = v;

#ifdef DBC_WARNINGS
    if (strlen(r->name) >= DBC_MAX_SYMBOL_NAME_LENGTH)
        dbc_warning(state,
                    "warning: node '%s': Name is longer than %u symbols",
                    r->name,
                    DBC_MAX_SYMBOL_NAME_LENGTH);
#endif
}

%type maybe_names { GSList * }
%destructor maybe_names { g_slist_free_full($$, g_free); }

maybe_names(r) ::= .          { r = NULL; }
maybe_names(r) ::= names(v) . { r = v; }

%type names { GSList * }
%destructor names { g_slist_free_full($$, g_free); }

names(r) ::= name(v) .          { r = g_slist_prepend(NULL, v); }
names(r) ::= names(l) name(v) . { r = g_slist_prepend(l, v); }

%type maybe_name { gchar * }
%destructor maybe_name { g_free($$); }

maybe_name(r) ::= .         { r = NULL; }
maybe_name(r) ::= name(v) . { r = v; }

%type name { gchar * }
%destructor name { g_free($$); }

name(r) ::= NAME(v) . { r = v; }
name(r) ::= MUX(v) .  { r = v; }
name(r) ::= DUMMY_0(v) . { r = v; }
name(r) ::= DUMMY_1(v) . { r = v; }
name(r) ::= DUMMY_2(v) . { r = v; }
name(r) ::= DUMMY_3(v) . { r = v; }
name(r) ::= DUMMY_8000(v) . { r = v; }
name(r) ::= DUMMY_8001(v) . { r = v; }
name(r) ::= DUMMY_8002(v) . { r = v; }
name(r) ::= DUMMY_8003(v) . { r = v; }
name(r) ::= VECTOR__XXX .   { r = NULL; }

%type comma_separated_names { GSList * }
%destructor comma_separated_names { g_slist_free_full($$, g_free); }

comma_separated_names(r) ::= name(v) .                                { r = g_slist_prepend(NULL, v); }
comma_separated_names(r) ::= comma_separated_names(l) COMMA name(v) . { r = g_slist_prepend(l, v); }

value_tables ::= .
value_tables ::= value_tables value_table .

value_table ::= VAL_TABLE name values SEMICOLON .

%type values { GArray * }
%destructor values { g_array_free($$, TRUE); }

values(r) ::= .
{
    r = g_array_new(TRUE, TRUE, sizeof(dbc_value_string_t));
    g_array_set_clear_func(r, dbc_free_value_string);
}

values(r) ::= values(a) value(v) .
{
#ifdef DBC_WARNINGS
    if (strlen(v.strptr) >= DBC_MAX_SYMBOL_NAME_LENGTH)
        dbc_warning(state,
                    "warning: value '%s': String is longer than %u symbols",
                    v.strptr,
                    DBC_MAX_SYMBOL_NAME_LENGTH);

    const dbc_value_string_t *av = (const dbc_value_string_t *)a->data;
    for (guint i = 0; i < a->len; ++av, ++i)
    {
        if (dbc_compare_value_strings(av, &v) == 0)
        {
            dbc_warning(state,
                        "warning: value '%" G_GINT32_FORMAT "' is already present",
                        v.value);
            break;
        }
    }
#endif

    r = g_array_append_val(a, v);
}

%type value { dbc_value_string_t }
%destructor value { dbc_free_value_string(&($$)); }

value(r) ::= sint(v) TEXT(t) .
{
    r.value  = v;
    r.strptr = t;
}

value(r) ::= FLOAT(f) TEXT(t) .
{
    const gint64 v = (gint64)strtod(f, NULL);
    g_free(f);

    r.value  = (v > G_MAXINT32 || v < G_MININT32) ? G_MININT32 : (gint32)v;
    r.strptr = t;
}

%type uint { gint32 }

uint(r) ::= ZERO .    { r = 0; }
uint(r) ::= ONE .     { r = 1; }
uint(r) ::= TWO .     { r = 2; }
uint(r) ::= UINT(v) .
{
    errno = 0;
    r     = (gint32)strtol(v, NULL, 10);

    if (errno || r < G_MININT32 || r > G_MAXINT32)
        r = G_MININT32;

    g_free(v);
}

%type sint { gint32 }

sint(r) ::= uint(v) .       { r = v; }
sint(r) ::= PLUS uint(v) .  { r = v; }
sint(r) ::= MINUS uint(v) . { r = 0 - v; }

%type float { double }

float(r) ::= sint(v) .       { r = v; }
float(r) ::= FLOAT(v) .      { r = strtod(v, NULL); g_free(v); }

%type msg_id { guint32 }

msg_id(r) ::= ZERO .    { r = 0; }
msg_id(r) ::= ONE .     { r = 1; }
msg_id(r) ::= TWO .     { r = 2; }
msg_id(r) ::= UINT(v) . { r = (guint32)strtoul(v, NULL, 10); g_free(v); }

messages ::= .
messages ::= messages message .

message ::= BO msg_id(msg_id) name(msg_name) COLON
            uint(msg_length) name(msg_sender)
            signals(msg_signals)
            .
{
    dbc_message_t *msg;
    dbc_node_t    *sender;

    if (msg_sender)
    {
        sender = dbc_find_node(state->dbc, msg_sender);
        if (!sender)
        {
            dbc_error(state, "error: Node %s not found", msg_sender);
        }
        g_free(msg_sender);
    }
    else
    {
        sender = NULL;
    }

    msg = g_new0(dbc_message_t, 1);

    msg->id      = msg_id;
    msg->name    = msg_name;
    msg->length  = msg_length;
    msg->senders = sender ? g_slist_prepend(NULL, sender) : NULL;
    msg->signals = msg_signals;
    msg->type    = DBC_MESSAGE_TYPE_UNDEFINED;

    msg->send_type  = DBC_MESSAGE_SEND_TYPE_UNDEFINED;
    msg->cycle_time = DBC_MESSAGE_CYCLE_TIME_UNDEFINED;

#ifdef DBC_WARNINGS
    if (strlen(msg->name) > DBC_MAX_SYMBOL_NAME_LENGTH)
    {
        dbc_warning(state,
                    "warning: message %u '%s': Name is longer than %u symbols",
                    msg->id,
                    msg->name,
                    DBC_MAX_SYMBOL_NAME_LENGTH);
    }
#endif

    state->dbc->messages = g_slist_prepend(state->dbc->messages, msg);
}

%type signals { GSList * }
%destructor signals { g_slist_free_full($$, (GDestroyNotify)dbc_free_signal); }

signals(r) ::= .                      { r = NULL; }
signals(r) ::= signals(l) signal(v) . { r = g_slist_prepend(l, v); }

%type signal { dbc_signal_t * }
%destructor signal { dbc_free_signal($$); }

signal(r) ::= SG name(sig_name) mux(sig_mux_info) COLON
              uint(sig_start) PIPE uint(sig_length) AT
              endianess(sig_endianess) signess(sig_signess)
              LEFT_PARENTHESIS float(sig_factor) COMMA float(sig_offset) RIGHT_PARENTHESIS
              LEFT_BRACKET float(sig_min) PIPE float(sig_max) RIGHT_BRACKET
              TEXT(sig_unit) comma_separated_names
              .
{
    r = g_new0(dbc_signal_t, 1);

    r->name      = sig_name;
    r->start     = sig_start;
    r->length    = sig_length;
    r->signess   = sig_signess;
    r->endianess = sig_endianess;
    r->factor    = sig_factor;
    r->offset    = sig_offset;
    r->min       = sig_min;
    r->max       = sig_max;
    r->unit      = sig_unit;
    r->mux_info  = sig_mux_info;
    r->type      = DBC_SIGNAL_TYPE_UNDEFINED;

#ifdef DBC_WARNINGS
    if (strlen(r->name) > DBC_MAX_SYMBOL_NAME_LENGTH)
    {
        dbc_warning(state,
                    "warning: signal '%s': Name is longer than %u symbols",
                    r->name,
                    DBC_MAX_SYMBOL_NAME_LENGTH);
    }
    if (r->length <= 8 &&
        ((((r->endianess == DBC_SIGNAL_ENDIANESS_INTEL) &&
           ((r->start / 8) != ((r->start + r->length - 1) / 8)))) ||
         (((r->endianess == DBC_SIGNAL_ENDIANESS_MOTOROLA) &&
           ((r->start / 8) != ((r->start - r->length + 1) / 8))))))
    {
        dbc_warning(state,
                    "warning: signal '%s' <= 8 bits crosses byte boundary",
                    r->name);
    }
    /* In case of BE, LSB must be aligned */
    if (r->length > 8 &&
        ((((r->endianess == DBC_SIGNAL_ENDIANESS_INTEL) && ((r->start % 16) != 0))) ||
         (((r->endianess == DBC_SIGNAL_ENDIANESS_MOTOROLA) && (((r->start + 8 - r->length % 8) % 16 ) != 7)))))
    {
        dbc_warning(state,
                    "warning: signal '%s' > 8 bits is not aligned to 2 byte boundary",
                    r->name);
    }
#endif
}

%type mux { dbc_mux_info_t * }
%destructor mux { dbc_free_mux_info($$); }

mux(r) ::= .
{
    r = NULL;
}

mux(r) ::= MUX(v) .
{
    r = g_new0(dbc_mux_info_t, 1);

    r->is_muxed = (v[0] == 'm');
    r->is_muxer = (v[strlen(v) - 1] == 'M');

    if (r->is_muxed)
    {
        const gint32          value       = (gint32)strtoul(v + 1, NULL, 10);
        const dbc_mux_value_t muxer_value = { value, value };

        r->muxer_values = g_array_new(FALSE, FALSE, sizeof(dbc_mux_value_t));
        g_array_append_val(r->muxer_values, muxer_value);
    }

    g_free(v);
}

%type endianess { dbc_signal_endianess_t }
endianess(r) ::= ZERO . { r = DBC_SIGNAL_ENDIANESS_MOTOROLA; }
endianess(r) ::= ONE .  { r = DBC_SIGNAL_ENDIANESS_INTEL; }

%type signess { dbc_signal_signess_t }
signess(r) ::= PLUS .  { r = DBC_SIGNAL_SIGNESS_UNSIGNED; }
signess(r) ::= MINUS . { r = DBC_SIGNAL_SIGNESS_SIGNED; }

message_sender_lists ::= .
message_sender_lists ::= message_sender_lists message_sender_list .

message_sender_list ::= BO_TX_BU msg_id(msg_id) COLON
                        comma_separated_names(msg_senders) SEMICOLON
                        .
{
    dbc_message_t *msg = dbc_find_message(state->dbc, msg_id);

    if (!msg)
    {
        dbc_error(state, "Message with id %" G_GUINT32_FORMAT " not found", msg_id);
    }
    else
    {
        g_slist_free(msg->senders);

        for (GSList *elem = msg_senders; elem; elem = g_slist_next(elem))
        {
            const gchar *node_name = (const gchar *)elem->data;
            dbc_node_t  *node = dbc_find_node(state->dbc, node_name);

            if (!node)
            {
                dbc_error(state, "error: Node %s not found", node_name);
                break;
            }
            msg->senders = g_slist_prepend(msg->senders, node);
        }
    }

    g_slist_free_full(msg_senders, g_free);
}

%type comma_separated_node_names { GSList * }
%destructor comma_separated_node_names { g_slist_free_full($$, (GDestroyNotify)dbc_free_node); }

environment_variables ::= .
environment_variables ::= environment_variables environment_variable .

environment_variable ::= EV name COLON value_type
                         LEFT_BRACKET float /*min*/ PIPE float /*max*/ RIGHT_BRACKET
                         TEXT /*unit*/ float /*default*/ uint /*id*/
                         dummy_name /*access-rights*/ comma_separated_names /*ecus*/
                         SEMICOLON
                         .

%type value_type { dbc_value_type_t }

value_type(r) ::= ZERO . { r = DBC_SIGNAL_TYPE_INT; }
value_type(r) ::= ONE .  { r = DBC_SIGNAL_TYPE_FLOAT; }
value_type(r) ::= TWO .  { r = DBC_SIGNAL_TYPE_DOUBLE; }

dummy_name ::= DUMMY_0 .
dummy_name ::= DUMMY_1 .
dummy_name ::= DUMMY_2 .
dummy_name ::= DUMMY_3 .
dummy_name ::= DUMMY_8000 .
dummy_name ::= DUMMY_8001 .
dummy_name ::= DUMMY_8002 .
dummy_name ::= DUMMY_8003 .

environment_variables_data ::= .
environment_variables_data ::= environment_variables_data environment_variable_data .

environment_variable_data ::= ev_data_tag name COLON uint /*length*/ SEMICOLON .

ev_data_tag ::= ENVVAR_DATA .
ev_data_tag ::= EV_DATA .

signal_types ::= .
signal_types ::= signal_types signal_type.

signal_type ::= SGTYPE name COLON uint /*length*/ AT endianess signess
                LEFT_PARENTHESIS float /*factor*/ COMMA float /*offset*/ RIGHT_PARENTHESIS
                LEFT_BRACKET float /*min*/ PIPE float /*max*/ RIGHT_BRACKET
                TEXT /*unit*/ float /*default-value*/
                maybe_name /*value-table*/ SEMICOLON
                .

comments ::= .
comments ::= comments comment .

comment ::= CM BU name TEXT SEMICOLON .
comment ::= CM EV name TEXT SEMICOLON .

comment ::= CM TEXT(text) SEMICOLON .
{
    if (state->dbc->comment)
    {
        g_free(state->dbc->comment);

#ifdef DBC_WARNINGS
        dbc_warning(state, "warning: File comment redefined");
#endif
    }

    state->dbc->comment = text;
}

comment ::= CM BO msg_id(msg_id) TEXT(text) SEMICOLON .
{
    dbc_message_t *msg = dbc_find_message(state->dbc, msg_id);

    if (msg)
    {
        if (msg->comment)
        {
            g_free(msg->comment);

#ifdef DBC_WARNINGS
            dbc_warning(state, "warning: Message %" G_GUINT32_FORMAT " comment redefined", msg_id);
#endif
        }

        msg->comment = text;
    }
    else
    {
        g_free(text);
        dbc_error(state, "error: Message %" G_GUINT32_FORMAT " not found", msg_id);
    }
}

comment ::= CM SG msg_id(msg_id) name(sig_name) TEXT(text) SEMICOLON .
{
    dbc_signal_t *sig = dbc_find_signal(state->dbc, msg_id, sig_name);

    if (sig)
    {
        if (sig->comment)
        {
            g_free(sig->comment);

#ifdef DBC_WARNINGS
            dbc_warning(state, "warning: Signal %s message %" G_GUINT32_FORMAT " comment redefined",
                        sig_name, msg_id);
#endif
        }

        sig->comment = text;
    }
    else
    {
        g_free(text);
        dbc_error(state, "error: Signal %s in message %" G_GUINT32_FORMAT " not found",
                  sig_name, msg_id);
    }

    g_free(sig_name);
}

attribute_definitions ::= .
attribute_definitions ::= attribute_definitions attribute_definition.

attribute_definition ::= BA_DEF TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF EV TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF BU TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF BO TEXT(attr_name) attribute_type(attr_type) SEMICOLON .
{
    if (attr_type.type == DBC_ATTRIBUTE_ENUM)
    {
        if (g_strcmp0(attr_name, DBC_MESSAGE_TYPE_ATTRIBUTE_NAME) == 0)
        {
            gint type_num = dbc_find_enum_value(attr_type.enum_values, DBC_MESSAGE_TYPE_J1939_VALUE);

            if (type_num >= 0)
            {
                state->dbc->j1939_type_num = type_num;
            }
        }
        else if (g_strcmp0(attr_name, DBC_MESSAGE_SEND_TYPE_ATTRIBUTE_NAME) == 0)
        {
            gint type_num = dbc_find_enum_value(attr_type.enum_values, DBC_MESSAGE_SEND_TYPE_CYCLIC_VALUE);

            if (type_num >= 0)
            {
                state->dbc->cyclic_send_type_num = type_num;
            }
        }

        g_slist_free_full(attr_type.enum_values, g_free);
    }

    g_free(attr_name);
}

attribute_definition ::= BA_DEF SG TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF_REL BU_EV_REL TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF_REL BU_BO_REL TEXT /*name*/ attribute_type SEMICOLON .
attribute_definition ::= BA_DEF_REL BU_SG_REL TEXT /*name*/ attribute_type SEMICOLON .

%type attribute_type { dbc_attribute_t }
%destructor attribute_type { if ($$.type == DBC_ATTRIBUTE_ENUM) g_slist_free_full($$.enum_values, g_free); }

attribute_type(r) ::= ATTR_STRING .
{
    r.type = DBC_ATTRIBUTE_STRING;
}

attribute_type(r) ::= ATTR_INT sint(val_min) sint(val_max) .
{
    r.type     = DBC_ATTRIBUTE_INT;
    r.ival.min = val_min;
    r.ival.max = val_max;
}

attribute_type(r) ::= ATTR_HEX sint(val_min) sint(val_max) .
{
    r.type     = DBC_ATTRIBUTE_HEX;
    r.ival.min = val_min;
    r.ival.max = val_max;
}

attribute_type(r) ::= ATTR_FLOAT float(val_min) float(val_max) .
{
    r.type     = DBC_ATTRIBUTE_FLOAT;
    r.fval.min = val_min;
    r.fval.max = val_max;
}

attribute_type(r) ::= ATTR_ENUM enum_values(v) .
{
    r.type        = DBC_ATTRIBUTE_ENUM;
    r.enum_values = v;
}

%type enum_values { GSList * }
%destructor enum_values { g_slist_free_full($$, g_free); }

enum_values(r) ::= TEXT(v) .                      { r = g_slist_append(NULL, v); }
enum_values(r) ::= enum_values(l) COMMA TEXT(v) . { r = g_slist_append(l, v); }

attribute_sgtype_definitions ::= .
attribute_sgtype_definitions ::= attribute_sgtype_definitions attribute_sgtype_definition .

attribute_sgtype_definition ::= BA_DEF_SGTYPE TEXT /*name*/ SEMICOLON .

attribute_default_values ::= .
attribute_default_values ::= attribute_default_values attribute_default_value .

attribute_default_value ::= BA_DEF_DEF TEXT /*name*/ sint /*value*/ SEMICOLON .
attribute_default_value ::= BA_DEF_DEF TEXT /*name*/ FLOAT /*value*/ SEMICOLON .
attribute_default_value ::= BA_DEF_DEF TEXT /*name*/ TEXT /*value*/ SEMICOLON .
attribute_default_value ::= BA_DEF_DEF_REL TEXT /*name*/ sint /*value*/ SEMICOLON .
attribute_default_value ::= BA_DEF_DEF_REL TEXT /*name*/ FLOAT /*value*/ SEMICOLON .
attribute_default_value ::= BA_DEF_DEF_REL TEXT /*name*/ TEXT /*value*/ SEMICOLON .

attribute_values ::= .
attribute_values ::= attribute_values attribute_value .

attribute_value ::= BA TEXT /*name*/ attribute_object_value /*value*/ SEMICOLON .
attribute_value ::= BA TEXT /*name*/ EV name attribute_object_value /*value*/ SEMICOLON .

attribute_value ::= BA TEXT /*name*/ BU name sint /*value*/ SEMICOLON .
attribute_value ::= BA TEXT /*name*/ BU name FLOAT /*value*/ SEMICOLON .
attribute_value ::= BA TEXT(attr_name) BU name(node_name) TEXT(attr_value) SEMICOLON .
{
    dbc_node_t *node = dbc_find_node(state->dbc, node_name);

    if (!node)
    {
        dbc_error(state, "error: Node %s not found", node_name);
        g_free(attr_value);
    }
    else if (g_strcmp0(attr_name, DBC_NODE_LONG_NAME_ATTRIBUTE_NAME) == 0)
    {
        node->long_name = attr_value;
    }
    else
    {
        g_free(attr_value);
    }

    g_free(node_name);
    g_free(attr_name);
}

attribute_value ::= BA TEXT /*name*/ SG msg_id /*msg_id*/ name /*sig_name*/ sint /*value*/ SEMICOLON .
attribute_value ::= BA TEXT /*name*/ SG msg_id /*msg_id*/ name /*sig_name*/ FLOAT /*value*/ SEMICOLON .
attribute_value ::= BA TEXT(attr_name) SG msg_id(msg_id) name(sig_name) TEXT(attr_value) SEMICOLON .
{
    dbc_signal_t *sig = dbc_find_signal(state->dbc, msg_id, sig_name);

    if (!sig)
    {
        dbc_error(state, "error: Signal %s in message %" G_GUINT32_FORMAT " not found", sig_name, msg_id);
        g_free(attr_value);
    }
    else if (g_strcmp0(attr_name, DBC_SIGNAL_LONG_NAME_ATTRIBUTE_NAME) == 0)
    {
        sig->long_name = attr_value;
    }
    else
    {
        g_free(attr_value);
    }

    g_free(sig_name);
    g_free(attr_name);
}

attribute_value ::= BA TEXT /*name*/ BO msg_id /*msg_id*/ FLOAT /*value*/ SEMICOLON .
attribute_value ::= BA TEXT(attr_name) BO msg_id(msg_id) TEXT(attr_value) SEMICOLON .
{
    dbc_message_t *msg = dbc_find_message(state->dbc, msg_id);

    if (!msg)
    {
        dbc_error(state, "error: Message %" G_GUINT32_FORMAT " not found", msg_id);
        g_free(attr_value);
    }
    else if (g_strcmp0(attr_name, DBC_MESSAGE_LONG_NAME_ATTRIBUTE_NAME) == 0)
    {
        msg->long_name = attr_value;
    }
    else
    {
        g_free(attr_value);
    }

    g_free(attr_name);
}

attribute_value ::= BA TEXT(attr_name) BO msg_id(msg_id) sint(attr_value) SEMICOLON .
{
    dbc_message_t *msg = dbc_find_message(state->dbc, msg_id);

    if (!msg)
    {
        dbc_error(state, "error: Message %" G_GUINT32_FORMAT " not found", msg_id);
    }
    else if ((g_strcmp0(attr_name, DBC_MESSAGE_TYPE_ATTRIBUTE_NAME) == 0) &&
             (state->dbc->j1939_type_num >= 0))
    {
#ifdef DBC_WARNINGS
        if (msg->type != DBC_MESSAGE_TYPE_UNDEFINED)
            dbc_warning(state, "warning: Message %" G_GUINT32_FORMAT " type redefined", msg_id);
#endif

        msg->type = (state->dbc->j1939_type_num == attr_value)
            ? DBC_MESSAGE_TYPE_J1939
            : DBC_MESSAGE_TYPE_GENERIC;
    }
    else if ((g_strcmp0(attr_name, DBC_MESSAGE_SEND_TYPE_ATTRIBUTE_NAME) == 0) &&
             (state->dbc->cyclic_send_type_num >= 0))
    {
#ifdef DBC_WARNINGS
        if (msg->send_type != DBC_MESSAGE_SEND_TYPE_UNDEFINED)
            dbc_warning(state, "warning: Message %" G_GUINT32_FORMAT " send_type redefined", msg_id);
#endif

        msg->send_type = (state->dbc->cyclic_send_type_num == attr_value)
            ? DBC_MESSAGE_SEND_TYPE_CYCLIC
            : DBC_MESSAGE_SEND_TYPE_OTHER;
    }
    else if (g_strcmp0(attr_name, DBC_MESSAGE_CYCLE_TIME_ATTRIBUTE_NAME) == 0)
    {
#ifdef DBC_WARNINGS
        if (msg->cycle_time != DBC_MESSAGE_CYCLE_TIME_UNDEFINED)
            dbc_warning(state, "warning: Message %" G_GUINT32_FORMAT " cycle time redefined", msg_id);
#endif

        msg->cycle_time = attr_value;
    }

    g_free(attr_name);
}

attribute_value ::= BA_REL TEXT /*name*/ attribute_rel_object /*object*/ attribute_object_value /*value*/ SEMICOLON .
attribute_value ::= BA_SGTYPE TEXT /*name*/ SGTYPE name /*type*/ attribute_object_value /*value*/ SEMICOLON .

attribute_rel_object ::= BU_EV_REL name name .
attribute_rel_object ::= BU_BO_REL name uint .
attribute_rel_object ::= BU_SG_REL name SG msg_id name .

attribute_object_value ::= sint .
attribute_object_value ::= FLOAT .
attribute_object_value ::= TEXT .

value_definitions ::= .
value_definitions ::= value_definitions value_definition .

value_definition ::= VAL name /*environment-variable-name*/ values SEMICOLON .
value_definition ::= VAL msg_id(msg_id) name(sig_name) values(sig_values) SEMICOLON .
{
    dbc_signal_t *signal = dbc_find_signal(state->dbc, msg_id, sig_name);

    if (signal)
    {
        if (signal->values)
        {
            for (dbc_value_string_t *v = signal->values; v->strptr; v++)
                dbc_free_value_string(v);
            g_free(signal->values);

#ifdef DBC_WARNINGS
            dbc_warning(state, "warning: signal %s in message %" G_GUINT32_FORMAT " values redefined", sig_name, msg_id);
#endif
        }

        /* No sorting needed */
        g_array_sort(sig_values, dbc_compare_value_strings);
        signal->values = (dbc_value_string_t *)g_array_free(sig_values, FALSE);
    }
    else
    {
        g_array_free(sig_values, TRUE);
        dbc_error(state, "error: signal %s in message %" G_GUINT32_FORMAT " not found", sig_name, msg_id);
    }
    g_free(sig_name);
}

category_definitions ::= .
category_definitions ::= category_definitions category_definition .

category_definition ::= CAT_DEF uint name uint SEMICOLON .

categories ::= .
categories ::= categories category .

category ::= CAT EV name uint SEMICOLON .
category ::= CAT BU name uint SEMICOLON .
category ::= CAT BO uint uint SEMICOLON .

filter ::= .
filter ::= FILTER uint CAT maybe_uints BU maybe_names SEMICOLON .

maybe_uints ::= .
maybe_uints ::= uints .

uints ::= uint .
uints ::= uints uint .

signal_type_referencies ::= .
signal_type_referencies ::= signal_type_referencies signal_type_reference .

signal_type_reference ::= SIG_TYPE_REF msg_id /*msg_id*/ name /*sig_name*/ COLON name /*type*/ SEMICOLON .

signal_groups ::= .
signal_groups ::= signal_groups signal_group .

signal_group ::= SIG_GROUP msg_id /*msg_id*/ name /*group_name*/ uint /*repetitions*/ COLON names /*signal_names*/ SEMICOLON .

signal_value_types ::= .
signal_value_types ::= signal_value_types signal_value_type .

signal_value_type ::= SIG_VALTYPE msg_id(msg_id) name(sig_name) COLON value_type(sig_type) SEMICOLON .
{
    dbc_signal_t *signal = dbc_find_signal(state->dbc, msg_id, sig_name);

    if (signal)
    {
#ifdef DBC_WARNINGS
        if (signal->type != DBC_SIGNAL_TYPE_UNDEFINED)
            dbc_warning(state, "warning: signal %s in message %" G_GUINT32_FORMAT " type redefined", sig_name, msg_id);
#endif

        signal->type = sig_type;
    }
    else
    {
        dbc_error(state, "error: signal %s in message %" G_GUINT32_FORMAT " not found", sig_name, msg_id);
    }

    g_free(sig_name);
}

signal_multiplexing_definitions ::= .
signal_multiplexing_definitions ::= signal_multiplexing_definitions signal_multiplexing_definition .

signal_multiplexing_definition ::= SG_MUL_VAL msg_id(msg_id) name(sig_name) name(mux_name) mux_values(mux_values) SEMICOLON .
{
    dbc_signal_t *signal = dbc_find_signal(state->dbc, msg_id, sig_name);
    dbc_signal_t *muxer  = dbc_find_signal(state->dbc, msg_id, mux_name);

    if (!signal)
    {
        dbc_error(state, "error: multiplexed signal %s in message %" G_GUINT32_FORMAT " not found", sig_name, msg_id);
    }

    if (!muxer)
    {
        dbc_error(state, "error: multiplexer signal %s in message %" G_GUINT32_FORMAT " not found", mux_name, msg_id);
    }

    if (signal && muxer)
    {
        if (!signal->mux_info)
            signal->mux_info = g_new0(dbc_mux_info_t, 1);

        if (signal->mux_info->muxer_values)
            g_array_free(signal->mux_info->muxer_values, TRUE);

        signal->mux_info->is_muxed     = TRUE;
        signal->mux_info->muxer        = muxer;
        signal->mux_info->muxer_values = mux_values;

        if (!muxer->mux_info)
            muxer->mux_info = g_new0(dbc_mux_info_t, 1);

        muxer->mux_info->is_muxer = TRUE;
    }
    else
    {
        g_array_free(mux_values, TRUE);
    }

    g_free(sig_name);
    g_free(mux_name);
}

%type mux_values { GArray * }
%destructor mux_values { g_array_free($$, TRUE); }

mux_values(r) ::= mux_value(v) .
{
    r = g_array_new(FALSE, FALSE, sizeof(dbc_mux_value_t));

    g_array_append_val(r, v);
}

mux_values(r) ::= mux_values(l) COMMA mux_value(v) .
{
    r = l;
    g_array_append_val(r, v);
}

%type mux_value { dbc_mux_value_t }

mux_value(r) ::= uint(v_min) MINUS uint(v_max) .
{
    r.min = v_min;
    r.max = v_max;
}

%code {

#include "dbc_scanner_lex.h"

dbc_file_t *dbc_read(const gchar *filename)
{
    int          lex_code;
    yyscan_t     scanner;
    void        *parser;
    dbc_state_t  state;
    FILE        *fd;

    fd = fopen(filename, "r");
    if (!fd)
    {
        perror(filename);
        return NULL;
    }

    if (dbc_scanner_lex_init_extra(&state, &scanner) != 0)
    {
        return NULL;
    }

    memset(&state, 0, sizeof(state));
    state.lloc.first_line = 1;
    state.lloc.last_line  = 1;
    state.dbc             = dbc_new(filename);

    dbc_scanner_set_in(fd, scanner);
    parser = DbcParserAlloc(g_malloc);

#ifdef DBC_TRACE
    DbcParserTrace(stdout, "parser >> ");
#endif

    dbc_printf("%s: Starting parsing\n", G_STRFUNC);

    do
    {
        lex_code = dbc_scanner_lex(scanner);

        if (state.token)
            dbc_printf("%s: Feeding %s = '%s'\n",
                       G_STRFUNC, yyTokenName[lex_code],
                       state.token);
        else
            dbc_printf("%s: Feeding %s\n",
                       G_STRFUNC, yyTokenName[lex_code]);

        DbcParser(parser, lex_code, state.token, &state);

        if (state.errors)
            break;
    }
    while (lex_code);

    dbc_printf("%s: Done\n", G_STRFUNC);

    DbcParserFree(parser, g_free);
    dbc_scanner_lex_destroy(scanner);
    fclose(fd);

#ifdef DBC_WARNINGS
    if (state.warnings)
    {
        for (GSList *elem = state.warnings; elem; elem = g_slist_next(elem))
            fprintf(stderr, "%s:%s\n", filename, (gchar *)elem->data);
        g_slist_free_full(state.warnings, g_free);
    }
#endif

    if (state.errors)
    {
        for (GSList *elem = state.errors; elem; elem = g_slist_next(elem))
            fprintf(stderr, "%s:%s\n", filename, (gchar *)elem->data);
        g_slist_free_full(state.errors, g_free);
        dbc_free(state.dbc);
        return NULL;
    }

    return state.dbc;
}

int main(int argc, char **argv)
{
    dbc_file_t *dbc;

    if (argc != 2)
        return 1;

    dbc = dbc_read(argv[1]);

    if (!dbc)
        return 2;

    dbc_free(dbc);

    return 0;
}

}
